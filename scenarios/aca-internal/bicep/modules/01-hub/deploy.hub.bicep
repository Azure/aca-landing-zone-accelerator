targetScope = 'subscription'

// ------------------
//    PARAMETERS
// ------------------

@description('The name of the workload that is being deployed. Up to 10 characters long.')
@minLength(2)
@maxLength(10)
param workloadName string

@description('The name of the environment (e.g. "dev", "test", "prod", "uat", "dr", "qa"). Up to 8 characters long.')
@maxLength(8)
param environment string

@description('The location where the resources will be created.')
param location string = deployment().location

@description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')
param hubResourceGroupName string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

@description('CIDR of the hub virtual network.')
param vnetAddressPrefixes array

@description('Enable or disable the creation of the Azure Bastion.')
param enableBastion bool

@description('Enable or disable the creation of the Azure Bastion.')
param enableFirewall bool = true

@description('Bastion sku, default is basic')
@allowed([
  'Basic'
  'Standard'
])
param bastionSku string = 'Basic'

@description('CIDR to use for the Azure Bastion subnet.')
param bastionSubnetAddressPrefix string

@description('CIDR to use for the gatewaySubnet.')
param gatewaySubnetAddressPrefix string

@description('CIDR to use for the azureFirewallSubnet.')
param azureFirewallSubnetAddressPrefix string

@description('CIDR to use for the AzureFirewallManagementSubnet, which is required by AzFW Basic.')
param azureFirewallSubnetManagementAddressPrefix string

@description('CIDR of the spoke infrastructure subnet.')
param spokeInfraSubnetAddressPrefix string


// ------------------
// VARIABLES
// ------------------

// This cannot be another value
var gatewaySubnetName = 'GatewaySubnet'

// This cannot be another value
var azureFirewallSubnetName = 'AzureFirewallSubnet'
var AzureFirewallManagementSubnetName = 'AzureFirewallManagementSubnet'

//Subnet definition taking in consideration feature flags
var defaultSubnets = [
  {
    name: gatewaySubnetName
    properties: {
      addressPrefix: gatewaySubnetAddressPrefix      
    }
  }
]

// This cannot be another value
var bastionSubnetName = 'AzureBastionSubnet'

// Append optional bastion subnet, if required
var bastionSubnets = enableBastion ? concat(defaultSubnets, [
    {
      name: bastionSubnetName
      properties: {
        addressPrefix: bastionSubnetAddressPrefix
      }
    }
  ]) : defaultSubnets

var vnetSubnets = enableFirewall ? concat(bastionSubnets, [
  {
    name: azureFirewallSubnetName
    properties: {
      addressPrefix: azureFirewallSubnetAddressPrefix
    }
  }
  {
    name: AzureFirewallManagementSubnetName
    properties: {
      addressPrefix: azureFirewallSubnetManagementAddressPrefix
    }
  }
]) : bastionSubnets

//used only to override the RG name - because it is created at the subscription level, the naming module cannot be loaded/used
var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))
var rgHubName = !empty(hubResourceGroupName) ? hubResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-hub-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'

// ------------------
// RESOURCES
// ------------------

@description('The hub resource group. This would normally be already provisioned by your platform team.')
resource hubResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {
  name: rgHubName
  location: location
  tags: tags
}

@description('The log sink for Azure Diagnostics')
module hubLogAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {
  scope: hubResourceGroup
  name: take('hubLogWs-${uniqueString(hubResourceGroup.id)}', 64)
  params: {
    location: location
    name: naming.outputs.resourcesNames.logAnalyticsWorkspace
  }
}

@description('User-configured naming rules')
module naming '../../../../shared/bicep/naming/naming.module.bicep' = {
  scope: hubResourceGroup
  name: take('01-sharedNamingDeployment-${deployment().name}', 64)
  params: {
    uniqueId: uniqueString(hubResourceGroup.id)
    environment: environment
    workloadName: workloadName
    location: location
  }
}

@description('The virtual network used as the stand-in for the regional hub. This would normally be already provisioned by your platform team.')
module vnetHub '../../../../shared/bicep/network/vnet.bicep' = {
  name: take('vnetHub-${deployment().name}', 64)
  scope: hubResourceGroup
  params: {
    name: naming.outputs.resourcesNames.vnetHub
    location: location
    subnets: vnetSubnets
    vnetAddressPrefixes: vnetAddressPrefixes
    tags: tags
  }
}

@description('The Azure Firewall deployment. This would normally be already provisioned by your platform team.')
module azfw './modules/azureFirewall.bicep' = if (enableFirewall) {
  scope: hubResourceGroup
  name: take('afw-${deployment().name}', 64)
  params: {
    location: location
    tags: tags
    afwVNetName: vnetHub.outputs.vnetName
    logAnalyticsWorkspaceId: hubLogAnalyticsWorkspace.outputs.logAnalyticsWsId
    firewallName: naming.outputs.resourcesNames.azureFirewall
    publicIpName: naming.outputs.resourcesNames.azureFirewallPip
    spokeInfraSubnetAddressPrefix: spokeInfraSubnetAddressPrefix
    azureFirewallSubnetManagementAddressPrefix: azureFirewallSubnetManagementAddressPrefix
  }
}

@description('An optional Azure Bastion deployment for jump box access. This would normally be already provisioned by your platform team.')
module bastion './modules/bastion.bicep' = if (enableBastion) {
  name: take('bastion-${deployment().name}', 64)
  scope: hubResourceGroup
  params: {
    location: location
    tags: tags
    sku:bastionSku
    bastionName: naming.outputs.resourcesNames.bastion
    bastionNetworkSecurityGroupName: naming.outputs.resourcesNames.bastionNsg
    bastionPublicIpName: naming.outputs.resourcesNames.bastionPip
    bastionSubnetName: bastionSubnetName
    bastionSubnetAddressPrefix: bastionSubnetAddressPrefix
    bastionVNetName: vnetHub.outputs.vnetName
  }
}

// ------------------
// OUTPUTS
// ------------------

@description('The resource ID of hub virtual network.')
output hubVNetId string = vnetHub.outputs.vnetId

@description('The name of hub virtual network')
output hubVnetName string = vnetHub.outputs.vnetName

@description('The name of the hub resource group.')
output resourceGroupName string = hubResourceGroup.name

@description('The private IP address of the Azure Firewall.')
output networkApplianceIpAddress string = enableFirewall ? azfw.outputs.afwPrivateIp : ''

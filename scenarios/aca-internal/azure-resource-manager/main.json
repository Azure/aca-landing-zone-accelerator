{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "1332096001640947620"
    }
  },
  "parameters": {
    "workloadName": {
      "type": "string",
      "defaultValue": "aca-lza",
      "minLength": 2,
      "maxLength": 10,
      "metadata": {
        "description": "The name of the workload that is being deployed. Up to 10 characters long."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "test",
      "maxLength": 8,
      "metadata": {
        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location where the resources will be created."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags to be assigned to the created resources."
      }
    },
    "deployHub": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable or disable the creation of the Hub network and it's supporting services."
      }
    },
    "enableFirewall": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable or disable the creation of the Azure Firewall. Can't deploy a Firewall without deploying hub network."
      }
    },
    "hubResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the hub resource group to create the resources in. If set, it overrides the name generated by the template."
      }
    },
    "vnetAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The address prefixes to use for the virtual network."
      }
    },
    "enableBastion": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable the creation of the Azure Bastion."
      }
    },
    "bastionSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "Bastion sku, default is basic"
      }
    },
    "bastionSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR to use for the Azure Bastion subnet."
      }
    },
    "gatewaySubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR to use for the gatewaySubnet."
      }
    },
    "azureFirewallSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR to use for the azureFirewallSubnet."
      }
    },
    "azureFirewallSubnetManagementAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR to use for the AzureFirewallManagementSubnet, which is required by AzFW Basic."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The size of the virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "The username to use for the virtual machine."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password to use for the virtual machine."
      }
    },
    "vmLinuxSshAuthorizedKeys": {
      "type": "securestring",
      "metadata": {
        "description": "The SSH public key to use for the virtual machine."
      }
    },
    "vmAuthenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "vmJumpboxOSType": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "linux",
        "windows",
        "none"
      ]
    },
    "vmJumpBoxSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR to use for the virtual machine subnet."
      }
    },
    "spokeResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template."
      }
    },
    "spokeVNetAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "CIDR of the Spoke Virtual Network."
      }
    },
    "spokeInfraSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR of the Spoke Infrastructure Subnet."
      }
    },
    "spokePrivateEndpointsSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR of the Spoke Private Endpoints Subnet."
      }
    },
    "spokeApplicationGatewaySubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "CIDR of the Spoke Application Gateway Subnet."
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable the createion of Application Insights."
      }
    },
    "enableDaprInstrumentation": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable Dapr Application Instrumentation Key used for Dapr telemetry. If Application Insights is not enabled, this parameter is ignored."
      }
    },
    "deployHelloWorldSample": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable the deployment of the Hello World Sample App. If disabled, the Application Gateway will not be deployed."
      }
    },
    "applicationGatewayFqdn": {
      "type": "string",
      "metadata": {
        "description": "The FQDN of the Application Gateway. Must match the TLS Certificate."
      }
    },
    "enableApplicationGatewayCertificate": {
      "type": "bool",
      "metadata": {
        "description": "Enable or disable Application Gateway Certificate (PFX)."
      }
    },
    "applicationGatewayCertificateKeyName": {
      "type": "string",
      "metadata": {
        "description": "The name of the certificate key to use for Application Gateway certificate."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable usage and telemetry feedback to Microsoft."
      }
    },
    "deployRedisCache": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional, default value is false. If true, Azure Cache for Redis (Premium SKU), together with Private Endpoint and the relavant Private DNS Zone will be deployed"
      }
    },
    "deployOpenAi": {
      "type": "bool",
      "metadata": {
        "description": "Deploy (or not) an Azure OpenAI account. ATTENTION: At the time of writing this, OpenAI is in preview and only available in limited regions: look here: https://learn.microsoft.com/azure/ai-services/openai/chatgpt-quickstart#prerequisites"
      }
    },
    "deployZoneRedundantResources": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
      }
    },
    "deployAzurePolicies": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional, default value is true. If true, Azure Policies will be deployed"
      }
    },
    "ddosProtectionMode": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled",
        "VirtualNetworkInherited"
      ],
      "metadata": {
        "description": "Optional. DDoS protection mode. see https://learn.microsoft.com/azure/ddos-protection/ddos-protection-sku-comparison#skus"
      }
    }
  },
  "variables": {
    "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
    "namingRules": "[json(variables('$fxv#0'))]",
    "rgHubName": "[if(not(empty(parameters('hubResourceGroupName'))), parameters('hubResourceGroupName'), format('{0}-{1}-hub-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]",
    "rgSpokeName": "[if(not(empty(parameters('spokeResourceGroupName'))), parameters('spokeResourceGroupName'), format('{0}-{1}-spoke-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-06-01",
      "name": "[variables('rgSpokeName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "condition": "[parameters('deployHub')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('hub-{0}-deployment', deployment().name), 64)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableFirewall": {
            "value": "[parameters('enableFirewall')]"
          },
          "hubResourceGroupName": {
            "value": "[variables('rgHubName')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "vnetAddressPrefixes": {
            "value": "[parameters('vnetAddressPrefixes')]"
          },
          "enableBastion": {
            "value": "[parameters('enableBastion')]"
          },
          "bastionSku": {
            "value": "[parameters('bastionSku')]"
          },
          "bastionSubnetAddressPrefix": {
            "value": "[parameters('bastionSubnetAddressPrefix')]"
          },
          "azureFirewallSubnetAddressPrefix": {
            "value": "[parameters('azureFirewallSubnetAddressPrefix')]"
          },
          "azureFirewallSubnetManagementAddressPrefix": {
            "value": "[parameters('azureFirewallSubnetManagementAddressPrefix')]"
          },
          "gatewaySubnetAddressPrefix": {
            "value": "[parameters('gatewaySubnetAddressPrefix')]"
          },
          "spokeInfraSubnetAddressPrefix": {
            "value": "[parameters('spokeInfraSubnetAddressPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "12305222078806844999"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location where the resources will be created."
              }
            },
            "hubResourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "vnetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "CIDR of the hub virtual network."
              }
            },
            "enableBastion": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable the creation of the Azure Bastion."
              }
            },
            "enableFirewall": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable or disable the creation of the Azure Bastion."
              }
            },
            "bastionSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Bastion sku, default is basic"
              }
            },
            "bastionSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the Azure Bastion subnet."
              }
            },
            "gatewaySubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the gatewaySubnet."
              }
            },
            "azureFirewallSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the azureFirewallSubnet."
              }
            },
            "azureFirewallSubnetManagementAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the AzureFirewallManagementSubnet, which is required by AzFW Basic."
              }
            },
            "spokeInfraSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke infrastructure subnet."
              }
            }
          },
          "variables": {
            "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
            "gatewaySubnetName": "GatewaySubnet",
            "azureFirewallSubnetName": "AzureFirewallSubnet",
            "AzureFirewallManagementSubnetName": "AzureFirewallManagementSubnet",
            "defaultSubnets": [
              {
                "name": "[variables('gatewaySubnetName')]",
                "properties": {
                  "addressPrefix": "[parameters('gatewaySubnetAddressPrefix')]"
                }
              }
            ],
            "bastionSubnetName": "AzureBastionSubnet",
            "bastionSubnets": "[if(parameters('enableBastion'), concat(variables('defaultSubnets'), createArray(createObject('name', variables('bastionSubnetName'), 'properties', createObject('addressPrefix', parameters('bastionSubnetAddressPrefix'))))), variables('defaultSubnets'))]",
            "vnetSubnets": "[if(parameters('enableFirewall'), concat(variables('bastionSubnets'), createArray(createObject('name', variables('azureFirewallSubnetName'), 'properties', createObject('addressPrefix', parameters('azureFirewallSubnetAddressPrefix'))), createObject('name', variables('AzureFirewallManagementSubnetName'), 'properties', createObject('addressPrefix', parameters('azureFirewallSubnetManagementAddressPrefix'))))), variables('bastionSubnets'))]",
            "namingRules": "[json(variables('$fxv#0'))]",
            "rgHubName": "[if(not(empty(parameters('hubResourceGroupName'))), parameters('hubResourceGroupName'), format('{0}-{1}-hub-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[variables('rgHubName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "metadata": {
                "description": "The hub resource group. This would normally be already provisioned by your platform team."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('hubLogWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName')))), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.logAnalyticsWorkspace]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "5928160571951609193"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. Name of the Log Analytics Workspace Service. It must be between 4 and 63 characters and can contain only letters, numbers and \"-\". The \"-\" should not be the first or the last symbol"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region where the resources will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "serviceTier": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "Free",
                        "Standalone",
                        "PerNode",
                        "PerGB2018"
                      ],
                      "metadata": {
                        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 90,
                      "minValue": 0,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional, default 90. Number of days data will be retained for."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    }
                  },
                  "variables": {
                    "lawsMaxLength": 63,
                    "lawsNameSantized": "[replace(replace(parameters('name'), '_', '-'), '.', '-')]",
                    "lawsName": "[if(greater(length(variables('lawsNameSantized')), variables('lawsMaxLength')), substring(variables('lawsNameSantized'), 0, variables('lawsMaxLength')), variables('lawsNameSantized'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[variables('lawsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": "[parameters('dataRetention')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "sku": {
                          "name": "[parameters('serviceTier')]"
                        },
                        "features": {
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWsName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource."
                      },
                      "value": "[variables('lawsName')]"
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName'))]"
                    },
                    "customerId": {
                      "type": "string",
                      "metadata": {
                        "description": "The customer id of the log analytics workspace."
                      },
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName')), '2022-10-01').customerId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The log sink for Azure Diagnostics"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName')))]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11791113627827812288"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-pep', variables('naming').resourceTypeAbbreviations.networkSecurityGroup)]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]",
                      "mysqlServer": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.mysqlServer), '-', '')), 24)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]"
              ],
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vnetHub-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vnetHub]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnets": {
                    "value": "[variables('vnetSubnets')]"
                  },
                  "vnetAddressPrefixes": {
                    "value": "[parameters('vnetAddressPrefixes')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "13723632967755413160"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "vnetAddressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Array, CIDRs to be allocated to the new vnet i.e. 192.168.0.0/24"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Pass an array of objects for all the required subnets"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    }
                  },
                  "variables": {
                    "vnetNameMaxLength": 80,
                    "vnetName": "[take(parameters('name'), variables('vnetNameMaxLength'))]",
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vnetAddressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                        "subnets": "[parameters('subnets')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Virtual network"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    },
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Virtual network"
                      },
                      "value": "[variables('vnetName')]"
                    },
                    "vnetSubnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Outputs the array of the subnets, printing: index, subnetResourceId, subnerName. "
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "subnetIndex": "[copyIndex()]",
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].id]",
                          "name": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].name]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The virtual network used as the stand-in for the regional hub. This would normally be already provisioned by your platform team."
              }
            },
            {
              "condition": "[parameters('enableFirewall')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('afw-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "afwVNetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('hubLogWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName')))), 64)), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  },
                  "firewallName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.azureFirewall]"
                  },
                  "publicIpName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.azureFirewallPip]"
                  },
                  "spokeInfraSubnetAddressPrefix": {
                    "value": "[parameters('spokeInfraSubnetAddressPrefix')]"
                  },
                  "azureFirewallSubnetManagementAddressPrefix": {
                    "value": "[parameters('azureFirewallSubnetManagementAddressPrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2011897887802276035"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "firewallName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the azure firewall to create."
                      }
                    },
                    "publicIpName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name for the public ip address of the azure firewall."
                      }
                    },
                    "afwVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the virtual network in which afw is created."
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The log analytics workspace id to which the azure firewall will send logs."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "spokeInfraSubnetAddressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR of the spoke infrastructure subnet."
                      }
                    },
                    "azureFirewallSubnetManagementAddressPrefix": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "applicationRuleCollections": [
                      {
                        "name": "ace-allow-rules",
                        "properties": {
                          "action": {
                            "type": "allow"
                          },
                          "priority": 110,
                          "rules": [
                            {
                              "name": "ace-general-allow-rules",
                              "protocols": [
                                {
                                  "port": "80",
                                  "protocolType": "HTTP"
                                },
                                {
                                  "port": "443",
                                  "protocolType": "HTTPS"
                                }
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "targetFqdns": [
                                "mcr.microsoft.com",
                                "*.data.mcr.microsoft.com",
                                "[format('*.blob.{0}', environment().suffixes.storage)]"
                              ]
                            },
                            {
                              "name": "ace-acr-and-docker-allow-rules",
                              "protocols": [
                                {
                                  "port": "443",
                                  "protocolType": "HTTPS"
                                }
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "targetFqdns": [
                                "[format('*.blob.{0}', environment().suffixes.storage)]",
                                "login.microsoft.com",
                                "*.azurecr.io",
                                "hub.docker.com",
                                "registry-1.docker.io",
                                "production.cloudflare.docker.com"
                              ]
                            },
                            {
                              "name": "ace-managed-identity-allow-rules",
                              "protocols": [
                                {
                                  "port": "443",
                                  "protocolType": "HTTPS"
                                }
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "targetFqdns": [
                                "*.identity.azure.net",
                                "login.microsoftonline.com",
                                "*.login.microsoftonline.com",
                                "*.login.microsoft.com"
                              ]
                            },
                            {
                              "name": "ace-keyvault-allow-rules",
                              "protocols": [
                                {
                                  "port": "443",
                                  "protocolType": "HTTPS"
                                }
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "targetFqdns": [
                                "[format('*{0}', environment().suffixes.keyvaultDns)]",
                                "login.microsoft.com"
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "name": "allow_azure_monitor",
                        "properties": {
                          "action": {
                            "type": "allow"
                          },
                          "priority": 120,
                          "rules": [
                            {
                              "fqdnTags": [],
                              "targetFqdns": [
                                "dc.applicationinsights.azure.com",
                                "dc.applicationinsights.microsoft.com",
                                "dc.services.visualstudio.com",
                                "*.in.applicationinsights.azure.com",
                                "live.applicationinsights.azure.com",
                                "rt.applicationinsights.microsoft.com",
                                "rt.services.visualstudio.com",
                                "*.livediagnostics.monitor.azure.com",
                                "*.monitoring.azure.com",
                                "agent.azureserviceprofiler.net",
                                "*.agent.azureserviceprofiler.net",
                                "*.monitor.azure.com"
                              ],
                              "name": "allow-azure-monitor",
                              "protocols": [
                                {
                                  "port": "443",
                                  "protocolType": "HTTPS"
                                }
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "name": "allow_core_dev_fqdn",
                        "properties": {
                          "action": {
                            "type": "allow"
                          },
                          "priority": 130,
                          "rules": [
                            {
                              "name": "allow-developer-services",
                              "fqdnTags": [],
                              "targetFqdns": [
                                "github.com",
                                "*.github.com",
                                "ghcr.io",
                                "*.ghcr.io",
                                "*.nuget.org",
                                "[format('*.blob.{0}', environment().suffixes.storage)]",
                                "[format('*.table.{0}', environment().suffixes.storage)]",
                                "*.servicebus.windows.net",
                                "githubusercontent.com",
                                "*.githubusercontent.com",
                                "dev.azure.com",
                                "portal.azure.com",
                                "*.portal.azure.com",
                                "*.portal.azure.net",
                                "appservice.azureedge.net",
                                "*.azurewebsites.net"
                              ],
                              "protocols": [
                                {
                                  "port": "443",
                                  "protocolType": "HTTPS"
                                }
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ]
                            },
                            {
                              "name": "allow-certificate-dependencies",
                              "fqdnTags": [],
                              "targetFqdns": [
                                "*.delivery.mp.microsoft.com",
                                "ctldl.windowsupdate.com",
                                "ocsp.msocsp.com",
                                "oneocsp.microsoft.com",
                                "crl.microsoft.com",
                                "www.microsoft.com",
                                "*.digicert.com",
                                "*.symantec.com",
                                "*.symcb.com",
                                "*.d-trust.net"
                              ],
                              "protocols": [
                                {
                                  "port": "80",
                                  "protocolType": "HTTP"
                                },
                                {
                                  "port": "443",
                                  "protocolType": "HTTPS"
                                }
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ]
                            }
                          ]
                        }
                      }
                    ],
                    "networkRules": [
                      {
                        "name": "ace-allow-rules",
                        "properties": {
                          "action": {
                            "type": "allow"
                          },
                          "priority": 100,
                          "rules": [
                            {
                              "name": "ace-general-allow-rule",
                              "protocols": [
                                "Any"
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "destinationAddresses": [
                                "MicrosoftContainerRegistry",
                                "AzureFrontDoor.FirstParty"
                              ],
                              "destinationPorts": [
                                "443"
                              ]
                            },
                            {
                              "name": "ace-acr-allow-rule",
                              "protocols": [
                                "Any"
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "destinationAddresses": [
                                "AzureContainerRegistry",
                                "AzureActiveDirectory"
                              ],
                              "destinationPorts": [
                                "443"
                              ]
                            },
                            {
                              "name": "ace-keyvault-allow-rule",
                              "protocols": [
                                "Any"
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "destinationAddresses": [
                                "AzureKeyVault",
                                "AzureActiveDirectory"
                              ],
                              "destinationPorts": [
                                "443"
                              ]
                            },
                            {
                              "name": "ace-managedIdentity-allow-rule",
                              "protocols": [
                                "Any"
                              ],
                              "sourceAddresses": [
                                "[parameters('spokeInfraSubnetAddressPrefix')]"
                              ],
                              "destinationAddresses": [
                                "AzureActiveDirectory"
                              ],
                              "destinationPorts": [
                                "443"
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('afwVNetName'), 'AzureFirewallManagementSubnet')]",
                      "properties": {
                        "addressPrefix": "[parameters('azureFirewallSubnetManagementAddressPrefix')]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "afw-deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('firewallName')]"
                          },
                          "publicIpName": {
                            "value": "[parameters('publicIpName')]"
                          },
                          "azureSkuTier": {
                            "value": "Basic"
                          },
                          "vNetId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('afwVNetName'))]"
                          },
                          "additionalPublicIpConfigurations": {
                            "value": []
                          },
                          "applicationRuleCollections": {
                            "value": "[variables('applicationRuleCollections')]"
                          },
                          "networkRuleCollections": {
                            "value": "[variables('networkRules')]"
                          },
                          "natRuleCollections": {
                            "value": []
                          },
                          "threatIntelMode": {
                            "value": "Deny"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          },
                          "azFwManagementSubnetId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('afwVNetName'), 'AzureFirewallManagementSubnet')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "10312721016808065596"
                            }
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to 'AllMetrics' to collect all metrics."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Azure Firewall."
                              }
                            },
                            "publicIpName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location')))]",
                              "metadata": {
                                "description": "Optional. Name of the Public IP address if created. If empty, a name will be generated."
                              }
                            },
                            "azureSkuTier": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "allowedValues": [
                                "Basic",
                                "Standard",
                                "Premium"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of an Azure Firewall."
                              }
                            },
                            "vNetId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. Shared services Virtual Network resource ID. The virtual network ID containing AzureFirewallSubnet. If a Public IP is not provided, then the Public IP that is created as part of this module will be applied with the subnet provided in this variable. Required if `virtualHubId` is empty."
                              }
                            },
                            "additionalPublicIpConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. This is to add any additional Public IP configurations on top of the Public IP with subnet IP configuration."
                              }
                            },
                            "publicIPAddressObject": {
                              "type": "object",
                              "defaultValue": {
                                "name": "[format('{0}-pip', parameters('name'))]"
                              },
                              "metadata": {
                                "description": "Optional. Specifies the properties of the Public IP to create and be used by the Firewall, if no existing public IP was provided."
                              }
                            },
                            "managementIPAddressObject": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Specifies the properties of the Management Public IP to create and be used by Azure Firewall. If it's not provided and managementIPResourceID is empty, a '-mip' suffix will be appended to the Firewall's name."
                              }
                            },
                            "applicationRuleCollections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of application rule collections used by Azure Firewall."
                              }
                            },
                            "networkRuleCollections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of network rule collections used by Azure Firewall."
                              }
                            },
                            "natRuleCollections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of NAT rule collections used by Azure Firewall."
                              }
                            },
                            "firewallPolicyId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Firewall Policy that should be attached."
                              }
                            },
                            "hubIPAddresses": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Conditional. IP addresses associated with AzureFirewall. Required if `virtualHubId` is supplied."
                              }
                            },
                            "virtualHubId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The virtualHub resource ID to which the firewall belongs. Required if `vNetId` is empty."
                              }
                            },
                            "threatIntelMode": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Alert",
                                "Deny",
                                "Off"
                              ],
                              "metadata": {
                                "description": "Optional. The operation mode for Threat Intel."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Diagnostic Storage Account resource identifier."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Log Analytics workspace resource identifier."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [
                                "1",
                                "2",
                                "3"
                              ],
                              "metadata": {
                                "description": "Optional. Zone numbers e.g. 1,2,3."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the Azure Firewall resource."
                              }
                            },
                            "azFwManagementSubnetId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "additionalPublicIpConfigurationsVar",
                                "count": "[length(parameters('additionalPublicIpConfigurations'))]",
                                "input": {
                                  "name": "[parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')].name]",
                                  "properties": {
                                    "publicIPAddress": "[if(contains(parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')], 'publicIPAddressResourceId'), createObject('id', parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')].publicIPAddressResourceId), null())]"
                                  }
                                }
                              }
                            ],
                            "azureSkuName": "[if(empty(parameters('vNetId')), 'AZFW_Hub', 'AZFW_VNet')]",
                            "requiresManagementIp": "[if(equals(parameters('azureSkuTier'), 'Basic'), true(), false())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "azureFirewall": {
                              "type": "Microsoft.Network/azureFirewalls",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "zones": "[if(equals(length(parameters('zones')), 0), null(), parameters('zones'))]",
                              "tags": "[parameters('tags')]",
                              "properties": "[if(equals(variables('azureSkuName'), 'AZFW_VNet'), createObject('threatIntelMode', parameters('threatIntelMode'), 'firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null()), 'ipConfigurations', concat(createArray(createObject('name', reference('publicIPAddress').outputs.name.value, 'properties', union(createObject('subnet', createObject('id', format('{0}/subnets/AzureFirewallSubnet', parameters('vNetId')))), if(not(empty(parameters('publicIPAddressObject'))), createObject('publicIPAddress', createObject('id', reference('publicIPAddress').outputs.resourceId.value)), createObject())))), variables('additionalPublicIpConfigurationsVar')), 'managementIpConfiguration', if(variables('requiresManagementIp'), createObject('name', reference('managementIPAddress').outputs.name.value, 'properties', createObject('subnet', createObject('id', parameters('azFwManagementSubnetId')), 'publicIPAddress', createObject('id', reference('managementIPAddress').outputs.resourceId.value))), null()), 'sku', createObject('name', variables('azureSkuName'), 'tier', parameters('azureSkuTier')), 'applicationRuleCollections', parameters('applicationRuleCollections'), 'natRuleCollections', parameters('natRuleCollections'), 'networkRuleCollections', parameters('networkRuleCollections')), createObject('firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null()), 'sku', createObject('name', variables('azureSkuName'), 'tier', parameters('azureSkuTier')), 'hubIPAddresses', if(not(empty(parameters('hubIPAddresses'))), parameters('hubIPAddresses'), null()), 'virtualHub', if(not(empty(parameters('virtualHubId'))), createObject('id', parameters('virtualHubId')), null())))]",
                              "dependsOn": [
                                "managementIPAddress",
                                "publicIPAddress"
                              ]
                            },
                            "azureFirewall_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "azureFirewall"
                              ]
                            },
                            "azureFirewall_diagnosticSettings": {
                              "copy": {
                                "name": "azureFirewall_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                                "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'AllLogs', 'enabled', true())))]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "azureFirewall"
                              ]
                            },
                            "azureFirewall_roleAssignments": {
                              "copy": {
                                "name": "azureFirewall_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "azureFirewall"
                              ]
                            },
                            "publicIPAddress": {
                              "condition": "[equals(variables('azureSkuName'), 'AZFW_VNet')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('publicIpName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('publicIPAddressObject').name]"
                                  },
                                  "publicIPPrefixResourceId": "[if(contains(parameters('publicIPAddressObject'), 'publicIPPrefixResourceId'), if(not(empty(parameters('publicIPAddressObject').publicIPPrefixResourceId)), createObject('value', parameters('publicIPAddressObject').publicIPPrefixResourceId), createObject('value', '')), createObject('value', ''))]",
                                  "publicIPAllocationMethod": "[if(contains(parameters('publicIPAddressObject'), 'publicIPAllocationMethod'), if(not(empty(parameters('publicIPAddressObject').publicIPAllocationMethod)), createObject('value', parameters('publicIPAddressObject').publicIPAllocationMethod), createObject('value', 'Static')), createObject('value', 'Static'))]",
                                  "skuName": "[if(contains(parameters('publicIPAddressObject'), 'skuName'), if(not(empty(parameters('publicIPAddressObject').skuName)), createObject('value', parameters('publicIPAddressObject').skuName), createObject('value', 'Standard')), createObject('value', 'Standard'))]",
                                  "skuTier": "[if(contains(parameters('publicIPAddressObject'), 'skuTier'), if(not(empty(parameters('publicIPAddressObject').skuTier)), createObject('value', parameters('publicIPAddressObject').skuTier), createObject('value', 'Regional')), createObject('value', 'Regional'))]",
                                  "roleAssignments": "[if(contains(parameters('publicIPAddressObject'), 'roleAssignments'), if(not(empty(parameters('publicIPAddressObject').roleAssignments)), createObject('value', parameters('publicIPAddressObject').roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('publicIPAddressObject'), 'tags'), parameters('tags'))]"
                                  },
                                  "zones": {
                                    "value": "[parameters('zones')]"
                                  },
                                  "diagnosticMetricsToEnable": "[if(contains(parameters('publicIPAddressObject'), 'diagnosticMetricsToEnable'), if(not(empty(parameters('publicIPAddressObject').diagnosticMetricsToEnable)), createObject('value', parameters('publicIPAddressObject').diagnosticMetricsToEnable), createObject('value', createArray('AllMetrics'))), createObject('value', createArray('AllMetrics')))]",
                                  "diagnosticLogCategoriesToEnable": "[if(contains(parameters('publicIPAddressObject'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('publicIPAddressObject').diagnosticLogCategoriesToEnable), createObject('value', createArray('allLogs')))]",
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "10411711349032966522"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Public IP Address."
                                      }
                                    },
                                    "publicIPPrefixResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                      }
                                    },
                                    "publicIPAllocationMethod": {
                                      "type": "string",
                                      "defaultValue": "Dynamic",
                                      "allowedValues": [
                                        "Dynamic",
                                        "Static"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The public IP address allocation method."
                                      }
                                    },
                                    "skuName": {
                                      "type": "string",
                                      "defaultValue": "Basic",
                                      "allowedValues": [
                                        "Basic",
                                        "Standard"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Name of a public IP address SKU."
                                      }
                                    },
                                    "skuTier": {
                                      "type": "string",
                                      "defaultValue": "Regional",
                                      "allowedValues": [
                                        "Global",
                                        "Regional"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Tier of a public IP address SKU."
                                      }
                                    },
                                    "zones": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                      }
                                    },
                                    "publicIPAddressVersion": {
                                      "type": "string",
                                      "defaultValue": "IPv4",
                                      "allowedValues": [
                                        "IPv4",
                                        "IPv6"
                                      ],
                                      "metadata": {
                                        "description": "Optional. IP address version."
                                      }
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic storage account."
                                      }
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                                      }
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                      }
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                      }
                                    },
                                    "domainNameLabel": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                      }
                                    },
                                    "fqdn": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                      }
                                    },
                                    "reverseFqdn": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                      }
                                    },
                                    "lock": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "",
                                        "CanNotDelete",
                                        "ReadOnly"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specify the type of lock."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "diagnosticLogCategoriesToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "allLogs"
                                      ],
                                      "allowedValues": [
                                        "allLogs",
                                        "DDoSProtectionNotifications",
                                        "DDoSMitigationFlowLogs",
                                        "DDoSMitigationReports"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                                      }
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "AllMetrics"
                                      ],
                                      "allowedValues": [
                                        "AllMetrics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of metrics that will be streamed."
                                      }
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsLogsSpecified",
                                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                        "input": {
                                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                          "enabled": true
                                        }
                                      },
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true
                                        }
                                      }
                                    ],
                                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]",
                                        "tier": "[parameters('skuTier')]"
                                      },
                                      "zones": "[parameters('zones')]",
                                      "properties": {
                                        "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                        "idleTimeoutInMinutes": 4,
                                        "ipTags": []
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('lock')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]",
                                        "logs": "[variables('diagnosticsLogs')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "publicIpAddress_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "11615019865326990585"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Azure Center for SAP solutions administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b0c7e81-271f-4c71-90bf-e30bdfdbc2f7')]",
                                              "Azure Center for SAP solutions reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '05352d14-a920-4328-a0de-4cbe7430e26b')]",
                                              "Azure Center for SAP solutions service role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aabbc5dd-1af0-458b-a942-81af88f9c138')]",
                                              "Azure Kubernetes Service Policy Add-on Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "LocalNGFirewallAdministrator role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a8835c7d-b5cb-47fa-b6f0-65ea10ce07a2')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                                              "Windows Admin Center Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the public IP address was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the public IP address."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the public IP address."
                                      },
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                    },
                                    "ipAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The public IP address of the public IP address resource."
                                      },
                                      "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01').ipAddress, '')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01', 'full').location]"
                                    }
                                  }
                                }
                              }
                            },
                            "managementIPAddress": {
                              "condition": "[variables('requiresManagementIp')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-management', parameters('publicIpName'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": "[if(contains(parameters('managementIPAddressObject'), 'name'), if(not(empty(parameters('managementIPAddressObject').name)), createObject('value', parameters('managementIPAddressObject').name), createObject('value', format('{0}-mip', parameters('name')))), createObject('value', format('{0}-mip', parameters('name'))))]",
                                  "publicIPPrefixResourceId": "[if(contains(parameters('managementIPAddressObject'), 'managementIPPrefixResourceId'), if(not(empty(parameters('managementIPAddressObject').publicIPPrefixResourceId)), createObject('value', parameters('managementIPAddressObject').publicIPPrefixResourceId), createObject('value', '')), createObject('value', ''))]",
                                  "publicIPAllocationMethod": "[if(contains(parameters('managementIPAddressObject'), 'managementIPAllocationMethod'), if(not(empty(parameters('managementIPAddressObject').publicIPAllocationMethod)), createObject('value', parameters('managementIPAddressObject').publicIPAllocationMethod), createObject('value', 'Static')), createObject('value', 'Static'))]",
                                  "skuName": "[if(contains(parameters('managementIPAddressObject'), 'skuName'), if(not(empty(parameters('managementIPAddressObject').skuName)), createObject('value', parameters('managementIPAddressObject').skuName), createObject('value', 'Standard')), createObject('value', 'Standard'))]",
                                  "skuTier": "[if(contains(parameters('managementIPAddressObject'), 'skuTier'), if(not(empty(parameters('managementIPAddressObject').skuTier)), createObject('value', parameters('managementIPAddressObject').skuTier), createObject('value', 'Regional')), createObject('value', 'Regional'))]",
                                  "roleAssignments": "[if(contains(parameters('managementIPAddressObject'), 'roleAssignments'), if(not(empty(parameters('managementIPAddressObject').roleAssignments)), createObject('value', parameters('managementIPAddressObject').roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('managementIPAddressObject'), 'tags'), parameters('tags'))]"
                                  },
                                  "zones": {
                                    "value": "[parameters('zones')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "10411711349032966522"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Public IP Address."
                                      }
                                    },
                                    "publicIPPrefixResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                      }
                                    },
                                    "publicIPAllocationMethod": {
                                      "type": "string",
                                      "defaultValue": "Dynamic",
                                      "allowedValues": [
                                        "Dynamic",
                                        "Static"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The public IP address allocation method."
                                      }
                                    },
                                    "skuName": {
                                      "type": "string",
                                      "defaultValue": "Basic",
                                      "allowedValues": [
                                        "Basic",
                                        "Standard"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Name of a public IP address SKU."
                                      }
                                    },
                                    "skuTier": {
                                      "type": "string",
                                      "defaultValue": "Regional",
                                      "allowedValues": [
                                        "Global",
                                        "Regional"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Tier of a public IP address SKU."
                                      }
                                    },
                                    "zones": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                      }
                                    },
                                    "publicIPAddressVersion": {
                                      "type": "string",
                                      "defaultValue": "IPv4",
                                      "allowedValues": [
                                        "IPv4",
                                        "IPv6"
                                      ],
                                      "metadata": {
                                        "description": "Optional. IP address version."
                                      }
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic storage account."
                                      }
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                                      }
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                      }
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                      }
                                    },
                                    "domainNameLabel": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                      }
                                    },
                                    "fqdn": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                      }
                                    },
                                    "reverseFqdn": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                      }
                                    },
                                    "lock": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "",
                                        "CanNotDelete",
                                        "ReadOnly"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specify the type of lock."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "diagnosticLogCategoriesToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "allLogs"
                                      ],
                                      "allowedValues": [
                                        "allLogs",
                                        "DDoSProtectionNotifications",
                                        "DDoSMitigationFlowLogs",
                                        "DDoSMitigationReports"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                                      }
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "AllMetrics"
                                      ],
                                      "allowedValues": [
                                        "AllMetrics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of metrics that will be streamed."
                                      }
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsLogsSpecified",
                                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                        "input": {
                                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                          "enabled": true
                                        }
                                      },
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true
                                        }
                                      }
                                    ],
                                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]",
                                        "tier": "[parameters('skuTier')]"
                                      },
                                      "zones": "[parameters('zones')]",
                                      "properties": {
                                        "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                        "idleTimeoutInMinutes": 4,
                                        "ipTags": []
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('lock')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]",
                                        "logs": "[variables('diagnosticsLogs')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "publicIpAddress_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "11615019865326990585"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Azure Center for SAP solutions administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b0c7e81-271f-4c71-90bf-e30bdfdbc2f7')]",
                                              "Azure Center for SAP solutions reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '05352d14-a920-4328-a0de-4cbe7430e26b')]",
                                              "Azure Center for SAP solutions service role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aabbc5dd-1af0-458b-a942-81af88f9c138')]",
                                              "Azure Kubernetes Service Policy Add-on Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "LocalNGFirewallAdministrator role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a8835c7d-b5cb-47fa-b6f0-65ea10ce07a2')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                                              "Windows Admin Center Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the public IP address was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the public IP address."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the public IP address."
                                      },
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                    },
                                    "ipAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The public IP address of the public IP address resource."
                                      },
                                      "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01').ipAddress, '')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "metadata": {
                                "description": "create a Management Public IP address if one is not provided and the flag is true"
                              }
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Azure Firewall."
                              },
                              "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure Firewall."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the Azure firewall was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "privateIp": {
                              "type": "string",
                              "metadata": {
                                "description": "The private IP of the Azure firewall."
                              },
                              "value": "[if(contains(reference('azureFirewall'), 'ipConfigurations'), reference('azureFirewall').ipConfigurations[0].properties.privateIPAddress, '')]"
                            },
                            "ipConfAzureFirewallSubnet": {
                              "type": "object",
                              "metadata": {
                                "description": "The Public IP configuration object for the Azure Firewall Subnet."
                              },
                              "value": "[if(contains(reference('azureFirewall'), 'ipConfigurations'), reference('azureFirewall').ipConfigurations[0], createObject())]"
                            },
                            "applicationRuleCollections": {
                              "type": "array",
                              "metadata": {
                                "description": "List of Application Rule Collections."
                              },
                              "value": "[parameters('applicationRuleCollections')]"
                            },
                            "networkRuleCollections": {
                              "type": "array",
                              "metadata": {
                                "description": "List of Network Rule Collections."
                              },
                              "value": "[parameters('networkRuleCollections')]"
                            },
                            "natRuleCollections": {
                              "type": "array",
                              "metadata": {
                                "description": "Collection of NAT rule collections used by Azure Firewall."
                              },
                              "value": "[parameters('natRuleCollections')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('azureFirewall', '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('afwVNetName'), 'AzureFirewallManagementSubnet')]"
                      ],
                      "metadata": {
                        "description": "The azure firewall deployment."
                      }
                    }
                  ],
                  "outputs": {
                    "afwPrivateIp": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'afw-deployment'), '2022-09-01').outputs.privateIp.value]"
                    },
                    "afwId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'afw-deployment'), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('hubLogWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName')))), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The Azure Firewall deployment. This would normally be already provisioned by your platform team."
              }
            },
            {
              "condition": "[parameters('enableBastion')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('bastion-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgHubName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": "[parameters('bastionSku')]"
                  },
                  "bastionName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastion]"
                  },
                  "bastionNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastionNsg]"
                  },
                  "bastionPublicIpName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastionPip]"
                  },
                  "bastionSubnetName": {
                    "value": "[variables('bastionSubnetName')]"
                  },
                  "bastionSubnetAddressPrefix": {
                    "value": "[parameters('bastionSubnetAddressPrefix')]"
                  },
                  "bastionVNetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "12733050577653225433"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "bastionName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the bastion host to create."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Bastion sku, default is basic"
                      }
                    },
                    "bastionVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network in which bastion subnet is created."
                      }
                    },
                    "bastionSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the bastion subnet."
                      }
                    },
                    "bastionSubnetAddressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR of the bastion subnet."
                      }
                    },
                    "bastionNetworkSecurityGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group to create."
                      }
                    },
                    "bastionPublicIpName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('bastionSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('bastionPublicIpName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Regional"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static"
                      }
                    },
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('bastionName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "enableTunneling": "[if(equals(parameters('sku'), 'Standard'), true(), false())]",
                        "enableFileCopy": "[if(equals(parameters('sku'), 'Standard'), true(), false())]",
                        "ipConfigurations": [
                          {
                            "name": "ipconf",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpName'))]"
                              },
                              "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[0], split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[1])]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[0], split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('bastionNetworkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "AllowHttpsInbound",
                            "properties": {
                              "priority": 120,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "Internet",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowGatewayManagerInbound",
                            "properties": {
                              "priority": 130,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "GatewayManager",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowAzureLoadBalancerInbound",
                            "properties": {
                              "priority": 140,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "AzureLoadBalancer",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowBastionHostCommunicationInbound",
                            "properties": {
                              "priority": 150,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "8080",
                                "5701"
                              ],
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowSshRdpOutbound",
                            "properties": {
                              "priority": 100,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "22",
                                "3389"
                              ],
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowAzureCloudOutbound",
                            "properties": {
                              "priority": 110,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "AzureCloud"
                            }
                          },
                          {
                            "name": "AllowBastionCommunication",
                            "properties": {
                              "priority": 120,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "8080",
                                "5701"
                              ],
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowGetSessionInformation",
                            "properties": {
                              "priority": 130,
                              "protocol": "*",
                              "destinationPortRange": "80",
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "Internet"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgHubName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('01-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Azure Bastion deployment for jump box access. This would normally be already provisioned by your platform team."
              }
            }
          ],
          "outputs": {
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of hub virtual network."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetId.value]"
            },
            "hubVnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of hub virtual network"
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('vnetHub-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the hub resource group."
              },
              "value": "[variables('rgHubName')]"
            },
            "networkApplianceIpAddress": {
              "type": "string",
              "metadata": {
                "description": "The private IP address of the Azure Firewall."
              },
              "value": "[if(parameters('enableFirewall'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgHubName')), 'Microsoft.Resources/deployments', take(format('afw-{0}', deployment().name), 64)), '2022-09-01').outputs.afwPrivateIp.value, '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('spoke-{0}-deployment', deployment().name), 64)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "spokeResourceGroupName": {
            "value": "[variables('rgSpokeName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "hubVNetId": "[if(parameters('deployHub'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value), createObject('value', ''))]",
          "enableBastion": {
            "value": "[parameters('enableBastion')]"
          },
          "bastionSku": {
            "value": "[parameters('bastionSku')]"
          },
          "bastionSubnetAddressPrefix": {
            "value": "[parameters('bastionSubnetAddressPrefix')]"
          },
          "spokeApplicationGatewaySubnetAddressPrefix": {
            "value": "[parameters('spokeApplicationGatewaySubnetAddressPrefix')]"
          },
          "spokeInfraSubnetAddressPrefix": {
            "value": "[parameters('spokeInfraSubnetAddressPrefix')]"
          },
          "spokePrivateEndpointsSubnetAddressPrefix": {
            "value": "[parameters('spokePrivateEndpointsSubnetAddressPrefix')]"
          },
          "spokeVNetAddressPrefixes": {
            "value": "[parameters('spokeVNetAddressPrefixes')]"
          },
          "networkApplianceIpAddress": "[if(parameters('deployHub'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.networkApplianceIpAddress.value), createObject('value', ''))]",
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "vmAdminUsername": {
            "value": "[parameters('vmAdminUsername')]"
          },
          "vmAdminPassword": {
            "value": "[parameters('vmAdminPassword')]"
          },
          "vmLinuxSshAuthorizedKeys": {
            "value": "[parameters('vmLinuxSshAuthorizedKeys')]"
          },
          "vmJumpboxOSType": {
            "value": "[parameters('vmJumpboxOSType')]"
          },
          "vmJumpBoxSubnetAddressPrefix": {
            "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
          },
          "vmAuthenticationType": {
            "value": "[parameters('vmAuthenticationType')]"
          },
          "deployAzurePolicies": {
            "value": "[parameters('deployAzurePolicies')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "3332394081202780881"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location where the resources will be created. This should be the same region as the hub."
              }
            },
            "spokeResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team."
              }
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "defaultValue": "snet-infra",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template."
              }
            },
            "spokeInfraSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke infrastructure subnet."
              }
            },
            "spokePrivateEndpointsSubnetName": {
              "type": "string",
              "defaultValue": "snet-pep",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template."
              }
            },
            "spokePrivateEndpointsSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke private endpoints subnet."
              }
            },
            "spokeApplicationGatewaySubnetName": {
              "type": "string",
              "defaultValue": "snet-agw",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template."
              }
            },
            "spokeApplicationGatewaySubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created."
              }
            },
            "networkApplianceIpAddress": {
              "type": "string",
              "metadata": {
                "description": "The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
              }
            },
            "vmAdminUsername": {
              "type": "string",
              "metadata": {
                "description": "The username to use for the jump box."
              }
            },
            "vmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password to use for the jump box."
              }
            },
            "vmLinuxSshAuthorizedKeys": {
              "type": "securestring",
              "metadata": {
                "description": "The SSH public key to use for the jump box. Only relevant for Linux."
              }
            },
            "vmJumpboxOSType": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "linux",
                "windows",
                "none"
              ],
              "metadata": {
                "description": "The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created."
              }
            },
            "vmSubnetName": {
              "type": "string",
              "defaultValue": "snet-jumpbox",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template."
              }
            },
            "vmJumpBoxSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the jump box subnet."
              }
            },
            "vmAuthenticationType": {
              "type": "string",
              "defaultValue": "password",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ],
              "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
              }
            },
            "deployAzurePolicies": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default value is true. If true, Azure Policies will be deployed"
              }
            },
            "enableBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable or disable the creation of the Azure Bastion  in spoke network."
              }
            },
            "bastionSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.2.64/26",
              "metadata": {
                "description": "CIDR to use for the Azure Bastion subnet."
              }
            },
            "bastionSku": {
              "type": "string",
              "defaultValue": "Basic"
            }
          },
          "variables": {
            "$fxv#0": "{\r\n    //security rules (as of 2023-march-10): https://learn.microsoft.com/azure/container-apps/firewall-integration#nsg-allow-rules\r\n    //Inbound rules are not required, if we leave the default inbound rules 65000 and 65001\r\n    \"securityRules\": [\r\n        // {\r\n        //     \"name\": \"Allow_communication_between_IPs_in_the_infra_subnet\",\r\n        //     \"properties\": {\r\n        //         \"description\": \"Allow communication between IPs in the infrastructure subnet. This address is passed as a parameter when you create an environment. For example, 10.0.0.0/21.\",\r\n        //         \"protocol\": \"*\",\r\n        //         \"sourceAddressPrefix\": \"10.0.0.0/21\",\r\n        //         \"sourcePortRange\": \"*\",\r\n        //         \"destinationAddressPrefix\": \"10.0.0.0/21\",\r\n        //         \"destinationPortRange\": \"*\",\r\n        //         \"access\": \"Allow\",\r\n        //         \"priority\": 100,\r\n        //         \"direction\": \"Inbound\"\r\n        //     }\r\n        // },\r\n        // {\r\n        //     \"name\": \"Allow_Azure_Loadbalancer_To_Communicate_with_the_Environment\",\r\n        //     \"properties\": {\r\n        //         \"description\": \"Allow the Azure infrastructure load balancer to communicate with your environment.\",\r\n        //         \"protocol\": \"*\",\r\n        //         \"sourceAddressPrefix\": \"AzureLoadBalancer\",\r\n        //         \"sourcePortRange\": \"*\",\r\n        //         \"destinationAddressPrefix\": \"10.0.0.0/21\",\r\n        //         \"destinationPortRange\": \"*\",\r\n        //         \"access\": \"Allow\",\r\n        //         \"priority\": 110,\r\n        //         \"direction\": \"Inbound\"\r\n        //     }\r\n        // },\r\n        {\r\n            \"name\": \"Allow_Internal_AKS_Connection_Between_Nodes_And_Control_Plane_UDP\",\r\n            \"properties\": {\r\n                \"description\": \"internal AKS secure connection between underlying nodes and control plane..\",\r\n                \"protocol\": \"UDP\",\r\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\r\n                \"sourcePortRange\": \"*\",\r\n                \"destinationAddressPrefix\": \"AzureCloud.<location>\",\r\n                \"destinationPortRange\": \"1194\",\r\n                \"access\": \"Allow\",\r\n                \"priority\": 100,\r\n                \"direction\": \"Outbound\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Allow_Internal_AKS_Connection_Between_Nodes_And_Control_Plane_TCP\",\r\n            \"properties\": {\r\n                \"description\": \"internal AKS secure connection between underlying nodes and control plane..\",\r\n                \"protocol\": \"TCP\",\r\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\r\n                \"sourcePortRange\": \"*\",\r\n                \"destinationAddressPrefix\": \"AzureCloud.<location>\",\r\n                \"destinationPortRange\": \"9000\",\r\n                \"access\": \"Allow\",\r\n                \"priority\": 110,\r\n                \"direction\": \"Outbound\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Allow_Azure_Monitor\",\r\n            \"properties\": {\r\n                \"description\": \"Allows outbound calls to Azure Monitor.\",\r\n                \"protocol\": \"TCP\",\r\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\r\n                \"sourcePortRange\": \"*\",\r\n                \"destinationAddressPrefix\": \"AzureCloud.<location>\",\r\n                \"destinationPortRange\": \"443\",\r\n                \"access\": \"Allow\",\r\n                \"priority\": 120,\r\n                \"direction\": \"Outbound\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Allow_Outbound_443\",\r\n            \"properties\": {\r\n                \"description\": \"Allowing all outbound on port 443 provides a way to allow all FQDN based outbound dependencies that don't have a static IP\",\r\n                \"protocol\": \"TCP\",\r\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\r\n                \"sourcePortRange\": \"*\",\r\n                \"destinationAddressPrefix\": \"*\",\r\n                \"destinationPortRange\": \"443\",\r\n                \"access\": \"Allow\",\r\n                \"priority\": 130,\r\n                \"direction\": \"Outbound\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Allow_NTP_Server\",\r\n            \"properties\": {\r\n                \"description\": \"NTP server\",\r\n                \"protocol\": \"UDP\",\r\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\r\n                \"sourcePortRange\": \"*\",\r\n                \"destinationAddressPrefix\": \"*\",\r\n                \"destinationPortRange\": \"123\",\r\n                \"access\": \"Allow\",\r\n                \"priority\": 140,\r\n                \"direction\": \"Outbound\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Allow_Container_Apps_control_plane\",\r\n            \"properties\": {\r\n                \"description\": \"Container Apps control plane\",\r\n                \"protocol\": \"TCP\",\r\n                \"sourceAddressPrefix\": \"VirtualNetwork\",\r\n                \"sourcePortRange\": \"*\",\r\n                \"destinationAddressPrefix\": \"*\",\r\n                \"destinationPortRanges\": [\r\n                    \"5671\",\r\n                    \"5672\"\r\n                ],\r\n                \"access\": \"Allow\",\r\n                \"priority\": 150,\r\n                \"direction\": \"Outbound\"\r\n            }\r\n        }\r\n    ]\r\n}",
            "$fxv#1": [
              {
                "name": "HealthProbes",
                "properties": {
                  "description": "Sllow HealthProbes from gateway Manager.",
                  "protocol": "*",
                  "sourceAddressPrefix": "GatewayManager",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "65200-65535",
                  "access": "Allow",
                  "priority": 100,
                  "direction": "Inbound"
                }
              },
              {
                "name": "Allow_TLS",
                "properties": {
                  "description": "allow https incoming connections",
                  "protocol": "*",
                  "sourceAddressPrefix": "*",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "443",
                  "access": "Allow",
                  "priority": 110,
                  "direction": "Inbound"
                }
              },
              {
                "name": "Allow_HTTP",
                "properties": {
                  "description": "allow http incoming connections",
                  "protocol": "*",
                  "sourceAddressPrefix": "*",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "80",
                  "access": "Allow",
                  "priority": 120,
                  "direction": "Inbound"
                }
              },
              {
                "name": "Allow_AzureLoadBalancer",
                "properties": {
                  "description": "allow AzureLoadBalancer incoming connections",
                  "protocol": "*",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "80",
                  "access": "Allow",
                  "priority": 130,
                  "direction": "Inbound"
                }
              }
            ],
            "$fxv#2": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
            "locationVar": "[if(equals(parameters('location'), 'francecentral'), 'centralfrance', parameters('location'))]",
            "nsgCaeRules": "[json(replace(variables('$fxv#0'), '<location>', variables('locationVar')))]",
            "nsgAppGwRules": "[variables('$fxv#1')]",
            "namingRules": "[json(variables('$fxv#2'))]",
            "rgSpokeName": "[if(not(empty(parameters('spokeResourceGroupName'))), parameters('spokeResourceGroupName'), format('{0}-{1}-spoke-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]",
            "hubVNetResourceIdTokens": "[if(contains(parameters('hubVNetId'), '/'), split(parameters('hubVNetId'), '/'), array(''))]",
            "hubVNetName": "[if(greater(length(variables('hubVNetResourceIdTokens')), 8), variables('hubVNetResourceIdTokens')[8], '')]",
            "hubSubscriptionId": "[if(greater(length(variables('hubVNetResourceIdTokens')), 2), variables('hubVNetResourceIdTokens')[2], '')]",
            "hubResourceGroupName": "[if(greater(length(variables('hubVNetResourceIdTokens')), 4), variables('hubVNetResourceIdTokens')[4], '')]",
            "bastionSubnetName": "AzureBastionSubnet"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[variables('rgSpokeName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "metadata": {
                "description": "The spoke resource group. This would normally be already provisioned by your subscription vending process."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11791113627827812288"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-pep', variables('naming').resourceTypeAbbreviations.networkSecurityGroup)]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]",
                      "mysqlServer": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.mysqlServer), '-', '')), 24)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vnetSpoke-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vnetSpoke]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnets": "[if(not(equals(parameters('vmJumpboxOSType'), 'none')), createObject('value', concat(if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), concat(if(and(empty(variables('hubVNetName')), parameters('enableBastion')), concat(createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value)))), createArray(createObject('name', variables('bastionSubnetName'), 'properties', createObject('addressPrefix', parameters('bastionSubnetAddressPrefix'))))), createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value))))), createArray(createObject('name', parameters('spokeApplicationGatewaySubnetName'), 'properties', createObject('addressPrefix', parameters('spokeApplicationGatewaySubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value))))), if(and(empty(variables('hubVNetName')), parameters('enableBastion')), concat(createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value)))), createArray(createObject('name', variables('bastionSubnetName'), 'properties', createObject('addressPrefix', parameters('bastionSubnetAddressPrefix'))))), createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value)))))), createArray(createObject('name', parameters('vmSubnetName'), 'properties', createObject('addressPrefix', parameters('vmJumpBoxSubnetAddressPrefix')))))), if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), createObject('value', concat(if(and(empty(variables('hubVNetName')), parameters('enableBastion')), concat(createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value)))), createArray(createObject('name', variables('bastionSubnetName'), 'properties', createObject('addressPrefix', parameters('bastionSubnetAddressPrefix'))))), createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value))))), createArray(createObject('name', parameters('spokeApplicationGatewaySubnetName'), 'properties', createObject('addressPrefix', parameters('spokeApplicationGatewaySubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value)))))), if(and(empty(variables('hubVNetName')), parameters('enableBastion')), createObject('value', concat(createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value)))), createArray(createObject('name', variables('bastionSubnetName'), 'properties', createObject('addressPrefix', parameters('bastionSubnetAddressPrefix')))))), createObject('value', createArray(createObject('name', parameters('spokeInfraSubnetName'), 'properties', createObject('addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value), 'routeTable', if(not(equals(parameters('networkApplianceIpAddress'), '')), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.resourceId.value), null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments'))))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'properties', createObject('addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.nsgId.value))))))))]",
                  "vnetAddressPrefixes": {
                    "value": "[parameters('spokeVNetAddressPrefixes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "13723632967755413160"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "vnetAddressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Array, CIDRs to be allocated to the new vnet i.e. 192.168.0.0/24"
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Pass an array of objects for all the required subnets"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    }
                  },
                  "variables": {
                    "vnetNameMaxLength": 80,
                    "vnetName": "[take(parameters('name'), variables('vnetNameMaxLength'))]",
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vnetAddressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                        "subnets": "[parameters('subnets')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Virtual network"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    },
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Virtual network"
                      },
                      "value": "[variables('vnetName')]"
                    },
                    "vnetSubnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Outputs the array of the subnets, printing: index, subnetResourceId, subnerName. "
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                          "subnetIndex": "[copyIndex()]",
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].id]",
                          "name": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].name]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.logAnalyticsWorkspace]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "5928160571951609193"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. Name of the Log Analytics Workspace Service. It must be between 4 and 63 characters and can contain only letters, numbers and \"-\". The \"-\" should not be the first or the last symbol"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region where the resources will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "serviceTier": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "Free",
                        "Standalone",
                        "PerNode",
                        "PerGB2018"
                      ],
                      "metadata": {
                        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 90,
                      "minValue": 0,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional, default 90. Number of days data will be retained for."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    }
                  },
                  "variables": {
                    "lawsMaxLength": 63,
                    "lawsNameSantized": "[replace(replace(parameters('name'), '_', '-'), '.', '-')]",
                    "lawsName": "[if(greater(length(variables('lawsNameSantized')), variables('lawsMaxLength')), substring(variables('lawsNameSantized'), 0, variables('lawsMaxLength')), variables('lawsNameSantized'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[variables('lawsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": "[parameters('dataRetention')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "sku": {
                          "name": "[parameters('serviceTier')]"
                        },
                        "features": {
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWsName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource."
                      },
                      "value": "[variables('lawsName')]"
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName'))]"
                    },
                    "customerId": {
                      "type": "string",
                      "metadata": {
                        "description": "The customer id of the log analytics workspace."
                      },
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName')), '2022-10-01').customerId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "The log sink for Azure Diagnostics"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerAppsEnvironmentNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "securityRules": {
                    "value": "[variables('nsgCaeRules').securityRules]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "14440237831067286611"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the Network Security Group. Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric. End alphanumeric or underscore. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "flushConnection": "[parameters('flushConnection')]",
                        "securityRules": "[parameters('securityRules')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "nsgId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Network Security Group"
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "nsgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Network Security Group"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "Network security group rules for the Container Apps cluster."
              }
            },
            {
              "condition": "[not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgAppGw-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "securityRules": {
                    "value": "[variables('nsgAppGwRules')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "14440237831067286611"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the Network Security Group. Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric. End alphanumeric or underscore. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "flushConnection": "[parameters('flushConnection')]",
                        "securityRules": "[parameters('securityRules')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "nsgId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Network Security Group"
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "nsgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Network Security Group"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "NSG Rules for the Application Gateway."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgPep-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.pepNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "securityRules": {
                    "value": []
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "14440237831067286611"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the Network Security Group. Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric. End alphanumeric or underscore. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "flushConnection": "[parameters('flushConnection')]",
                        "securityRules": "[parameters('securityRules')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "nsgId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Network Security Group"
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "nsgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Network Security Group"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "NSG Rules for the private enpoint subnet."
              }
            },
            {
              "condition": "[not(empty(variables('hubVNetName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-peerSpokeToHubDeployment', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  },
                  "remoteSubscriptionId": {
                    "value": "[variables('hubSubscriptionId')]"
                  },
                  "remoteRgName": {
                    "value": "[variables('hubResourceGroupName')]"
                  },
                  "remoteVnetName": {
                    "value": "[variables('hubVNetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "15945919731749145822"
                    }
                  },
                  "parameters": {
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the local Virtual Network"
                      }
                    },
                    "remoteVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the remote Virtual Network"
                      }
                    },
                    "remoteRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group of the remote virtual netowrk"
                      }
                    },
                    "remoteSubscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the subscription of the remote virtual netowrk"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/peerTo-{1}', parameters('localVnetName'), parameters('remoteVnetName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowGatewayTransit": false,
                        "allowForwardedTraffic": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('remoteSubscriptionId'), parameters('remoteRgName'), 'Microsoft.Network/virtualNetworks', parameters('remoteVnetName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process."
              }
            },
            {
              "condition": "[not(empty(variables('hubVNetName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-peerHubToSpokeDeployment', deployment().name), 64)]",
              "subscriptionId": "[variables('hubSubscriptionId')]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[variables('hubVNetName')]"
                  },
                  "remoteSubscriptionId": {
                    "value": "[last(split(subscription().id, '/'))]"
                  },
                  "remoteRgName": {
                    "value": "[variables('rgSpokeName')]"
                  },
                  "remoteVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "15945919731749145822"
                    }
                  },
                  "parameters": {
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the local Virtual Network"
                      }
                    },
                    "remoteVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the remote Virtual Network"
                      }
                    },
                    "remoteRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group of the remote virtual netowrk"
                      }
                    },
                    "remoteSubscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the subscription of the remote virtual netowrk"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/peerTo-{1}', parameters('localVnetName'), parameters('remoteVnetName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowGatewayTransit": false,
                        "allowForwardedTraffic": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('remoteSubscriptionId'), parameters('remoteRgName'), 'Microsoft.Network/virtualNetworks', parameters('remoteVnetName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process."
              }
            },
            {
              "condition": "[not(equals(parameters('networkApplianceIpAddress'), ''))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('egressLockdownUdr-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.routeTable]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "routes": {
                    "value": [
                      {
                        "name": "defaultEgressLockdown",
                        "properties": {
                          "addressPrefix": "0.0.0.0/0",
                          "nextHopType": "VirtualAppliance",
                          "nextHopIpAddress": "[parameters('networkApplianceIpAddress')]"
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "8758218984864477327"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name given for the hub route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "routes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of Routes to be established within the hub route table."
                      }
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Switch to disable BGP route propagation."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ],
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]",
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "routeTable_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RouteTable-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "16271650836375679386"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Azure Center for SAP solutions administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b0c7e81-271f-4c71-90bf-e30bdfdbc2f7')]",
                              "Azure Center for SAP solutions reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '05352d14-a920-4328-a0de-4cbe7430e26b')]",
                              "Azure Center for SAP solutions service role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aabbc5dd-1af0-458b-a942-81af88f9c138')]",
                              "Azure Kubernetes Service Policy Add-on Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "LocalNGFirewallAdministrator role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a8835c7d-b5cb-47fa-b6f0-65ea10ce07a2')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "Windows Admin Center Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/routeTables/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/routeTables', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the route table was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the route table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the route table."
                      },
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Network/routeTables', parameters('name')), '2022-07-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "The Route Table deployment"
              }
            },
            {
              "condition": "[equals(parameters('vmJumpboxOSType'), 'linux')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-linux-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vmName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('vmAdminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('vmAdminPassword')]"
                  },
                  "vmSshPublicKey": {
                    "value": "[parameters('vmLinuxSshAuthorizedKeys')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  },
                  "vmSubnetName": {
                    "value": "[parameters('vmSubnetName')]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNic]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNsg]"
                  },
                  "vmAuthenticationType": {
                    "value": "[parameters('vmAuthenticationType')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "3329187883771628758"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "vmSshPublicKey": {
                      "type": "securestring"
                    },
                    "vmAuthenticationType": {
                      "type": "string",
                      "defaultValue": "password",
                      "allowedValues": [
                        "sshPublicKey",
                        "password"
                      ],
                      "metadata": {
                        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "variables": {
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": true,
                      "ssh": {
                        "publicKeys": [
                          {
                            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vmAdminUsername'))]",
                            "keyData": "[parameters('vmSshPublicKey')]"
                          }
                        ]
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('vmNetworkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": []
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('vmNetworkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                              },
                              "privateIPAllocationMethod": "Dynamic"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "osProfile": {
                          "computerName": "[parameters('vmName')]",
                          "adminUsername": "[parameters('vmAdminUsername')]",
                          "adminPassword": "[if(equals(parameters('vmAuthenticationType'), 'password'), parameters('vmAdminPassword'), null())]",
                          "linuxConfiguration": "[if(equals(parameters('vmAuthenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                        },
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "storageProfile": {
                          "osDisk": {
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "Standard_LRS"
                            }
                          },
                          "imageReference": {
                            "publisher": "Canonical",
                            "offer": "UbuntuServer",
                            "sku": "18.04-LTS",
                            "version": "latest"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Linux virtual machine deployment to act as a jump box."
              }
            },
            {
              "condition": "[equals(parameters('vmJumpboxOSType'), 'windows')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-windows-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vmName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('vmAdminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('vmAdminPassword')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  },
                  "vmSubnetName": {
                    "value": "[parameters('vmSubnetName')]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNic]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNsg]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2039155298805475097"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "vmWindowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2022-Datacenter"
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('vmNetworkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": []
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vmNetworkSecurityGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('vmNetworkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                              },
                              "privateIPAllocationMethod": "Dynamic"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "zones": [
                        "1"
                      ],
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "storageProfile": {
                          "osDisk": {
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "Standard_LRS"
                            }
                          },
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "[parameters('vmWindowsOSVersion')]",
                            "version": "latest"
                          }
                        },
                        "osProfile": {
                          "computerName": "[parameters('vmName')]",
                          "adminUsername": "[parameters('vmAdminUsername')]",
                          "adminPassword": "[parameters('vmAdminPassword')]"
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('vmNetworkInterfaceName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Windows virtual machine deployment to act as a jump box."
              }
            },
            {
              "condition": "[parameters('deployAzurePolicies')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('policyAssignments-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerRegistryName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistry]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "161717285086746861"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Container Registry that will be allow-listed by the policy."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
                    "$fxv#1": "{\r\n  \"properties\": {\r\n    \"displayName\": \"Azure Container Apps allowed container registries\",\r\n    \"policyType\": \"Custom\",\r\n    \"mode\": \"Indexed\",\r\n    \"description\": \"This policy enables you to restrict the list of container registries for Azure Container Apps.\",\r\n    \"metadata\": {\r\n      \"version\": \"1.0.0\",\r\n      \"category\": \"Azure Container Apps\"\r\n    },\r\n    \"parameters\": {\r\n      \"listOfAllowedContainerRegistries\": {\r\n        \"type\": \"Array\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Allowed container registries\",\r\n          \"description\": \"The list of container registries that can be specified when deploying resources.\"\r\n        },\r\n        \"defaultValue\": [\r\n          \"mcr.microsoft.com\"\r\n        ]\r\n      },\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Deny\",\r\n          \"Disabled\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [{\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.App/containerApps\"\r\n          },\r\n          {\r\n            \"count\": {\r\n              \"field\": \"Microsoft.App/containerApps/template.containers[*]\",\r\n              \"where\": {\r\n                \"value\": \"[split(first(field('Microsoft.App/containerApps/template.containers[*].image')), '/')[0]]\",\r\n                \"notIn\": \"[parameters('listOfAllowedContainerRegistries')]\"\r\n              }\r\n            },\r\n            \"greater\": 0\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    }\r\n  }\r\n}",
                    "$fxv#2": "{\r\n  \"properties\": {\r\n    \"displayName\": \"Azure Container Apps container replica count limits\",\r\n    \"policyType\": \"Custom\",\r\n    \"mode\": \"Indexed\",\r\n    \"description\": \"This policy enforces limits for the minimum and maximum number of replicas for Azure Container Apps.\",\r\n    \"metadata\": {\r\n      \"version\": \"1.0.0\",\r\n      \"category\": \"Azure Container Apps\"\r\n    },\r\n    \"parameters\": {\r\n      \"minReplicas\": {\r\n        \"type\": \"integer\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Min allowed replicas\",\r\n          \"description\": \"Specifies the minimum number of container replicas for the Azure Container App\"\r\n        },\r\n        \"defaultValue\": 0\r\n      },\r\n      \"maxReplicas\": {\r\n        \"type\": \"integer\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Max allowed replicas\",\r\n          \"description\": \"Specifies the maximum number of container replicas for the Azure Container App\"\r\n        },\r\n        \"defaultValue\": 30\r\n      },\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Deny\",\r\n          \"Disabled\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [{\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.App/containerApps\"\r\n          },\r\n          {\r\n            \"anyOf\": [{\r\n              \"field\": \"Microsoft.App/containerApps/template.scale.minReplicas\",\r\n              \"less\": \"[parameters('MinReplicas')]\"\r\n            }, {\r\n              \"field\": \"Microsoft.App/containerApps/template.scale.maxReplicas\",\r\n              \"greater\": \"[parameters('MaxReplicas')]\"\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    }\r\n  }\r\n}",
                    "$fxv#3": "{\r\n  \"properties\": {\r\n    \"displayName\": \"Azure Container Apps no container liveness probes\",\r\n    \"policyType\": \"Custom\",\r\n    \"mode\": \"Indexed\",\r\n    \"description\": \"This policy enforces that all the containers of Azure Containers Apps have liveness probes configured.\",\r\n    \"metadata\": {\r\n      \"version\": \"1.0.0\",\r\n      \"category\": \"Azure Container Apps\"\r\n    },\r\n    \"parameters\": {\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Deny\",\r\n          \"Disabled\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [{\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.App/containerApps\"\r\n          },\r\n          {\r\n            \"count\": {\r\n              \"field\": \"Microsoft.App/containerApps/template.containers[*].probes[*]\",\r\n              \"where\": {\r\n                \"field\": \"Microsoft.App/containerApps/template.containers[*].probes[*].type\",\r\n                \"equals\": \"Liveness\"\r\n              }\r\n            },\r\n            \"equals\": 0\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    }\r\n  }\r\n}",
                    "$fxv#4": "{\r\n  \"properties\": {\r\n    \"displayName\": \"Azure Container Apps no container readiness probes\",\r\n    \"policyType\": \"Custom\",\r\n    \"mode\": \"Indexed\",\r\n    \"description\": \"This policy enforces that all the containers of Azure Containers Apps have readiness probes configured.\",\r\n    \"metadata\": {\r\n      \"version\": \"1.0.0\",\r\n      \"category\": \"Azure Container Apps\"\r\n    },\r\n    \"parameters\": {\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Deny\",\r\n          \"Disabled\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [{\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.App/containerApps\"\r\n          },\r\n          {\r\n            \"count\": {\r\n              \"field\": \"Microsoft.App/containerApps/template.containers[*].probes[*]\",\r\n              \"where\": {\r\n                \"field\": \"Microsoft.App/containerApps/template.containers[*].probes[*].type\",\r\n                \"equals\": \"Readiness\"\r\n              }\r\n            },\r\n            \"equals\": 0\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    }\r\n  }\r\n}",
                    "$fxv#5": "{\r\n  \"properties\": {\r\n    \"displayName\": \"Azure Container Apps no container startup probes\",\r\n    \"policyType\": \"Custom\",\r\n    \"mode\": \"Indexed\",\r\n    \"description\": \"This policy enforces that all the containers of Azure Containers Apps have startup probes configured.\",\r\n    \"metadata\": {\r\n      \"version\": \"1.0.0\",\r\n      \"category\": \"Azure Container Apps\"\r\n    },\r\n    \"parameters\": {\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Deny\",\r\n          \"Disabled\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [{\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.App/containerApps\"\r\n          },\r\n          {\r\n            \"count\": {\r\n              \"field\": \"Microsoft.App/containerApps/template.containers[*].probes[*]\",\r\n              \"where\": {\r\n                \"field\": \"Microsoft.App/containerApps/template.containers[*].probes[*].type\",\r\n                \"equals\": \"Startup\"\r\n              }\r\n            },\r\n            \"equals\": 0\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    }\r\n  }\r\n}",
                    "$fxv#6": "{\r\n  \"properties\": {\r\n    \"displayName\": \"Azure Container Apps container required CPU and memory\",\r\n    \"policyType\": \"Custom\",\r\n    \"mode\": \"Indexed\",\r\n    \"description\": \"This policy enforces limits for container CPU and memory requests in an AZure Container App.\",\r\n    \"metadata\": {\r\n      \"version\": \"1.0.0\",\r\n      \"category\": \"Azure Container Apps\"\r\n    },\r\n    \"parameters\": {\r\n      \"maxCpu\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Max allowed CPU cores\",\r\n          \"description\": \"Specifies the maximum CPU cores allowed for a container. E.g. 1.25.\"\r\n        },\r\n        \"defaultValue\": \"2.0\"\r\n      },\r\n      \"maxMemory\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Max allowed memory in Gi\",\r\n          \"description\": \"Specifies the maximum memory in Gi allowed for a container. E.g. 2.5\"\r\n        },\r\n        \"defaultValue\": \"4.0\"\r\n      },\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Deny\",\r\n          \"Disabled\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [{\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.App/containerApps\"\r\n          },\r\n          {\r\n            \"anyOf\": [{\r\n                \"count\": {\r\n                  \"field\": \"Microsoft.App/containerApps/template.containers[*]\",\r\n                  \"where\": {\r\n                    \"field\": \"Microsoft.App/containerApps/template.containers[*].resources.cpu\",\r\n                    \"greater\": \"[float(parameters('maxCpu'))]\"\r\n                  }\r\n                },\r\n                \"greater\": 0\r\n              },\r\n              {\r\n                \"count\": {\r\n                  \"field\": \"Microsoft.App/containerApps/template.containers[*]\",\r\n                  \"where\": {\r\n                    \"value\": \"[float(substring(first(field('Microsoft.App/containerApps/template.containers[*].resources.memory')), 0, sub(length(first(field('Microsoft.App/containerApps/template.containers[*].resources.memory'))), 2)))]\",\r\n                    \"greater\": \"[float(parameters('maxMemory'))]\"\r\n                  }\r\n                },\r\n                \"greater\": 0\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    }\r\n  }\r\n}",
                    "$fxv#7": "{\r\n  \"properties\": {\r\n    \"displayName\": \"Azure Container Apps no monitoring configured\",\r\n    \"policyType\": \"Custom\",\r\n    \"mode\": \"All\",\r\n    \"description\": \"This policy enforces that monitoring is configured for Azure Container Apps environments.\",\r\n    \"metadata\": {\r\n      \"version\": \"1.0.0\",\r\n      \"category\": \"Azure Container Apps\"\r\n    },\r\n    \"parameters\": {\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Deny\",\r\n          \"Disabled\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [{\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.App/managedEnvironments\"\r\n          },\r\n          {\r\n            \"field\": \"Microsoft.App/managedEnvironments/appLogsConfiguration.destination\",\r\n            \"exists\": false\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    }\r\n  }\r\n}",
                    "namingRules": "[json(variables('$fxv#0'))]",
                    "builtInPolicies": [
                      {
                        "name": "authentication-should-be-enabled-on-container-apps",
                        "definition": {
                          "properties": {
                            "displayName": "Authentication should be enabled on container apps",
                            "description": "Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App"
                          }
                        },
                        "parameters": {
                          "effect": {
                            "value": "AuditIfNotExists"
                          }
                        },
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96"
                      },
                      {
                        "name": "container-app-environments-should-use-network-injection",
                        "definition": {
                          "properties": {
                            "displayName": "Container App environments should use network injection",
                            "description": "Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment"
                          }
                        },
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb"
                      },
                      {
                        "name": "container-app-should-configure-with-volume-mount",
                        "definition": {
                          "properties": {
                            "displayName": "Container App should configure with volume mount",
                            "description": "Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity"
                          }
                        },
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0"
                      },
                      {
                        "name": "container-app-should-disable-public-network-access",
                        "definition": {
                          "properties": {
                            "displayName": "Container Apps environment should disable public network access",
                            "description": "Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment."
                          }
                        },
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a"
                      },
                      {
                        "name": "container-apps-should-disable-external-network-access",
                        "definition": {
                          "properties": {
                            "displayName": "Container Apps should disable external network access",
                            "description": "Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment"
                          }
                        },
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1"
                      },
                      {
                        "name": "containerapps-should-only-be-accessible-over-HTTPS",
                        "definition": {
                          "properties": {
                            "displayName": "Container Apps should only be accessible over HTTPS",
                            "description": "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps."
                          }
                        },
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb"
                      },
                      {
                        "name": "managed-identity-should-be-enabled",
                        "definition": {
                          "properties": {
                            "displayName": "Managed Identity should be enabled for Container Apps",
                            "description": "Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication"
                          }
                        },
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7"
                      }
                    ],
                    "customPolicies": [
                      {
                        "name": "aca-allowed-container-registries",
                        "definition": "[json(variables('$fxv#1'))]",
                        "parameters": {
                          "listOfAllowedContainerRegistries": {
                            "value": [
                              "mcr.microsoft.com",
                              "docker.io",
                              "ghcr.io",
                              "[format('{0}.azurecr.io', parameters('containerRegistryName'))]"
                            ]
                          },
                          "effect": {
                            "value": "Audit"
                          }
                        }
                      },
                      {
                        "name": "aca-replica-count",
                        "definition": "[json(variables('$fxv#2'))]",
                        "parameters": {
                          "minReplicas": {
                            "value": 0
                          },
                          "maxReplicas": {
                            "value": 30
                          },
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "identity": false
                      },
                      {
                        "name": "aca-no-liveness-probes",
                        "definition": "[json(variables('$fxv#3'))]",
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "identity": false
                      },
                      {
                        "name": "aca-no-readiness-probes",
                        "definition": "[json(variables('$fxv#4'))]",
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "identity": false
                      },
                      {
                        "name": "aca-no-startup-probes",
                        "definition": "[json(variables('$fxv#5'))]",
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "identity": false
                      },
                      {
                        "name": "aca-required-cpu-and-memory",
                        "definition": "[json(variables('$fxv#6'))]",
                        "parameters": {
                          "maxCpu": {
                            "value": "1.0"
                          },
                          "maxMemory": {
                            "value": "2.5"
                          },
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "identity": false
                      },
                      {
                        "name": "aca-no-monitoring",
                        "definition": "[json(variables('$fxv#7'))]",
                        "parameters": {
                          "effect": {
                            "value": "Audit"
                          }
                        },
                        "identity": false
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "builtInPolicyAssignment",
                        "count": "[length(variables('builtInPolicies'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('poAssign_{0}', take(variables('builtInPolicies')[copyIndex()].name, 40))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policy": {
                            "value": "[variables('builtInPolicies')[copyIndex()]]"
                          },
                          "policyDefinitionId": {
                            "value": "[variables('builtInPolicies')[copyIndex()].policyDefinitionId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "4272497630959691893"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Specifies the location of the deployment."
                              }
                            },
                            "policy": {
                              "type": "object",
                              "metadata": {
                                "description": "Specifies the policy definition to assign."
                              }
                            },
                            "policyDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Specifies the resource id of the policy definition to assign."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "[uniqueString(format('{0}', parameters('policy').name))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "description": "[parameters('policy').definition.properties.description]",
                                "displayName": "[parameters('policy').definition.properties.displayName]",
                                "policyDefinitionId": "[parameters('policyDefinitionId')]",
                                "parameters": "[parameters('policy').parameters]"
                              }
                            }
                          ],
                          "outputs": {
                            "policyAssignmentId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/policyAssignments', uniqueString(format('{0}', parameters('policy').name)))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "policyDefinition",
                        "count": "[length(variables('customPolicies'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('poDef_{0}_{1}', variables('namingRules').regionAbbreviations[toLower(parameters('location'))], guid(variables('customPolicies')[copyIndex()].name))]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "policy": {
                            "value": "[variables('customPolicies')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "15731729765569278736"
                            }
                          },
                          "parameters": {
                            "policy": {
                              "type": "object",
                              "metadata": {
                                "description": "Specifies the policy definition to assign."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyDefinitions",
                              "apiVersion": "2021-06-01",
                              "name": "[guid(parameters('policy').name)]",
                              "properties": {
                                "description": "[parameters('policy').definition.properties.description]",
                                "displayName": "[parameters('policy').definition.properties.displayName]",
                                "metadata": "[parameters('policy').definition.properties.metadata]",
                                "mode": "[parameters('policy').definition.properties.mode]",
                                "parameters": "[parameters('policy').definition.properties.parameters]",
                                "policyType": "[parameters('policy').definition.properties.policyType]",
                                "policyRule": "[parameters('policy').definition.properties.policyRule]"
                              }
                            }
                          ],
                          "outputs": {
                            "policyDefinitionId": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', guid(parameters('policy').name))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "customPolicyAssignment",
                        "count": "[length(variables('customPolicies'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('poAssign_{0}', take(variables('customPolicies')[copyIndex()].name, 40))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policy": {
                            "value": "[variables('customPolicies')[copyIndex()]]"
                          },
                          "policyDefinitionId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('poDef_{0}_{1}', variables('namingRules').regionAbbreviations[toLower(parameters('location'))], guid(variables('customPolicies')[copyIndex()].name))), '2022-09-01').outputs.policyDefinitionId.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "4272497630959691893"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Specifies the location of the deployment."
                              }
                            },
                            "policy": {
                              "type": "object",
                              "metadata": {
                                "description": "Specifies the policy definition to assign."
                              }
                            },
                            "policyDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Specifies the resource id of the policy definition to assign."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "[uniqueString(format('{0}', parameters('policy').name))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "description": "[parameters('policy').definition.properties.description]",
                                "displayName": "[parameters('policy').definition.properties.displayName]",
                                "policyDefinitionId": "[parameters('policyDefinitionId')]",
                                "parameters": "[parameters('policy').parameters]"
                              }
                            }
                          ],
                          "outputs": {
                            "policyAssignmentId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/policyAssignments', uniqueString(format('{0}', parameters('policy').name)))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "policyDefinition"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
              ],
              "metadata": {
                "description": "Assign built-in and custom (container-apps related) policies to the spoke subscription."
              }
            },
            {
              "condition": "[and(empty(variables('hubVNetName')), parameters('enableBastion'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('bastion-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": "[parameters('bastionSku')]"
                  },
                  "bastionName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastion]"
                  },
                  "bastionNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastionNsg]"
                  },
                  "bastionPublicIpName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.bastionPip]"
                  },
                  "bastionSubnetName": {
                    "value": "[variables('bastionSubnetName')]"
                  },
                  "bastionSubnetAddressPrefix": {
                    "value": "[parameters('bastionSubnetAddressPrefix')]"
                  },
                  "bastionVNetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "12733050577653225433"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "bastionName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the bastion host to create."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Bastion sku, default is basic"
                      }
                    },
                    "bastionVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network in which bastion subnet is created."
                      }
                    },
                    "bastionSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the bastion subnet."
                      }
                    },
                    "bastionSubnetAddressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR of the bastion subnet."
                      }
                    },
                    "bastionNetworkSecurityGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group to create."
                      }
                    },
                    "bastionPublicIpName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('bastionSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('bastionPublicIpName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Regional"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static"
                      }
                    },
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('bastionName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "enableTunneling": "[if(equals(parameters('sku'), 'Standard'), true(), false())]",
                        "enableFileCopy": "[if(equals(parameters('sku'), 'Standard'), true(), false())]",
                        "ipConfigurations": [
                          {
                            "name": "ipconf",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpName'))]"
                              },
                              "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[0], split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[1])]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[0], split(format('{0}/{1}', parameters('bastionVNetName'), parameters('bastionSubnetName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('bastionNetworkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "AllowHttpsInbound",
                            "properties": {
                              "priority": 120,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "Internet",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowGatewayManagerInbound",
                            "properties": {
                              "priority": 130,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "GatewayManager",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowAzureLoadBalancerInbound",
                            "properties": {
                              "priority": 140,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "AzureLoadBalancer",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowBastionHostCommunicationInbound",
                            "properties": {
                              "priority": 150,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "8080",
                                "5701"
                              ],
                              "access": "Allow",
                              "direction": "Inbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowSshRdpOutbound",
                            "properties": {
                              "priority": 100,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "22",
                                "3389"
                              ],
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowAzureCloudOutbound",
                            "properties": {
                              "priority": 110,
                              "protocol": "Tcp",
                              "destinationPortRange": "443",
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "AzureCloud"
                            }
                          },
                          {
                            "name": "AllowBastionCommunication",
                            "properties": {
                              "priority": 120,
                              "protocol": "*",
                              "destinationPortRanges": [
                                "8080",
                                "5701"
                              ],
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowGetSessionInformation",
                            "properties": {
                              "priority": 130,
                              "protocol": "*",
                              "destinationPortRange": "80",
                              "access": "Allow",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "Internet"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Azure Bastion deployment for jump box access in your spoke network. This would normally be already provisioned by your platform team. This resource will not be provisioned, if you have a valid hub network resource id"
              }
            }
          ],
          "outputs": {
            "spokeResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke resource group."
              },
              "value": "[variables('rgSpokeName')]"
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke virtual network."
              },
              "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value)]"
            },
            "spokeVNetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke virtual network."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value]"
            },
            "spokeInfraSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke infrastructure subnet."
              },
              "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value, parameters('spokeInfraSubnetName'))]"
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke infrastructure subnet."
              },
              "value": "[parameters('spokeInfraSubnetName')]"
            },
            "spokePrivateEndpointsSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke private endpoints subnet."
              },
              "value": "[parameters('spokePrivateEndpointsSubnetName')]"
            },
            "spokeApplicationGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke Application Gateway subnet. This is '' if the subnet was not created."
              },
              "value": "[if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.vnetName.value, parameters('spokeApplicationGatewaySubnetName')), '')]"
            },
            "spokeApplicationGatewaySubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke Application Gateway subnet.  This is '' if the subnet was not created."
              },
              "value": "[if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), parameters('spokeApplicationGatewaySubnetName'), '')]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Log Analytics Workspace."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName')))), 64)), '2022-09-01').outputs.logAnalyticsWsId.value]"
            },
            "vmJumpBoxName": {
              "type": "string",
              "metadata": {
                "description": "The name of the jump box virtual machine"
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('02-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('supportingServices-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "spokePrivateEndpointSubnetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokePrivateEndpointsSubnetName.value]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "spokeVNetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetId.value]"
          },
          "hubVNetId": "[if(parameters('deployHub'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value), createObject('value', ''))]",
          "deployRedisCache": {
            "value": "[parameters('deployRedisCache')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          },
          "deployOpenAi": {
            "value": "[parameters('deployOpenAi')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "1723674398293225476"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing spoke virtual network to which the private endpoint will be connected."
              }
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing subnet in the spoke virtual to which the private endpoint will be connected."
              }
            },
            "deployRedisCache": {
              "type": "bool",
              "metadata": {
                "description": "Deploy Redis cache premium SKU"
              }
            },
            "deployOpenAi": {
              "type": "bool",
              "metadata": {
                "description": "Deploy (or not) an Azure OpenAI account. ATTENTION: At the time of writing this, OpenAI is in preview and only available in limited regions: look here: https://learn.microsoft.com/azure/ai-services/openai/chatgpt-quickstart#prerequisites"
              }
            },
            "deployOpenAiGptModel": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Deploy (or not) a model on the openAI Account. This is used only as a sample to show how to deploy a model on the OpenAI account."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. If left empty, no diagnostics settings will be defined."
              }
            },
            "deployZoneRedundantResources": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
              }
            }
          },
          "variables": {
            "hubVNetIdTokens": "[split(parameters('hubVNetId'), '/')]",
            "hubVNetName": "[if(greater(length(variables('hubVNetIdTokens')), 8), variables('hubVNetIdTokens')[8], '')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11791113627827812288"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-pep', variables('naming').resourceTypeAbbreviations.networkSecurityGroup)]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]",
                      "mysqlServer": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.mysqlServer), '-', '')), 24)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('containerRegistry-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerRegistryName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistry]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetName": {
                    "value": "[variables('hubVNetName')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "containerRegistryPrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistryPep]"
                  },
                  "containerRegistryUserAssignedIdentityName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistryUserAssignedIdentity]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "deployZoneRedundantResources": {
                    "value": "[parameters('deployZoneRedundantResources')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "14679087328053556759"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "hubVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": " Name of the hub vnet"
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "containerRegistryPrivateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to be created for Azure Container Registry."
                      }
                    },
                    "containerRegistryUserAssignedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity to be created to pull image from Azure Container Registry."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "deployZoneRedundantResources": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZoneNames": "privatelink.azurecr.io",
                    "containerRegistryResourceName": "registry",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "containerRegistryPullRoleGuid": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
                    "spokeVNetLinks": "[concat(createArray(createObject('vnetName', variables('spokeVNetName'), 'vnetId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName')), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetName'))), createArray(createObject('vnetName', parameters('hubVNetName'), 'vnetId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('containerRegistryUserAssignedIdentityName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('containerRegistryNameDeployment-{0}', deployment().name), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "name": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "acrSku": {
                            "value": "Premium"
                          },
                          "zoneRedundancy": "[if(parameters('deployZoneRedundantResources'), createObject('value', 'Enabled'), createObject('value', 'Disabled'))]",
                          "acrAdminUserEnabled": {
                            "value": false
                          },
                          "publicNetworkAccess": {
                            "value": "Disabled"
                          },
                          "networkRuleBypassOptions": {
                            "value": "AzureServices"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "agentPoolSubnetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "259542600216200148"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 5,
                              "maxLength": 50,
                              "metadata": {
                                "description": "Required. Name of your Azure container registry."
                              }
                            },
                            "acrAdminUserEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable admin user that have push / pull permission to the registry."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "acrSku": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Premium",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of your Azure container registry."
                              }
                            },
                            "exportPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the export policy is enabled or not."
                              }
                            },
                            "quarantinePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the quarantine policy is enabled or not."
                              }
                            },
                            "trustPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the trust policy is enabled or not."
                              }
                            },
                            "retentionPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the retention policy is enabled or not."
                              }
                            },
                            "retentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 15,
                              "metadata": {
                                "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                              }
                            },
                            "azureADAuthenticationAsArmPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the policy for using ARM audience token for a container registr is enabled or not. Default is enabled."
                              }
                            },
                            "softDeletePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Soft Delete policy status. Default is disabled."
                              }
                            },
                            "softDeletePolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. The number of days after which a soft-deleted item is permanently deleted."
                              }
                            },
                            "dataEndpointEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkRuleSetIpRules are not set.  Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "networkRuleBypassOptions": {
                              "type": "string",
                              "defaultValue": "AzureServices",
                              "allowedValues": [
                                "AzureServices",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
                              }
                            },
                            "networkRuleSetDefaultAction": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. The default action of allow or deny when no other rules match."
                              }
                            },
                            "networkRuleSetIpRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The IP ACL rules. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "zoneRedundancy": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The ID(s) to assign to the resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "allLogs",
                                "ContainerRegistryRepositoryEvents",
                                "ContainerRegistryLoginEvents"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            },
                            "anonymousPullEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables registry-wide pull from unauthenticated clients. It's in preview and available in the Standard and Premium service tiers."
                              }
                            },
                            "cMKKeyVaultResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of a key vault to reference a customer managed key for encryption from. Note, CMK requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "cMKKeyName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the customer managed key to use for encryption. Note, CMK requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "cMKKeyVersion": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, the latest key version is used."
                              }
                            },
                            "cMKUserAssignedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. User assigned identity to use when fetching the customer managed key. Note, CMK requires the 'acrSku' to be 'Premium'. Required if 'cMKKeyName' is not empty."
                              }
                            },
                            "agentPoolName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the agent pool. This agent pool will be used to build docker image to be deployed."
                              }
                            },
                            "agentPoolCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of agents in the agent pool."
                              }
                            },
                            "agentPoolTier": {
                              "type": "string",
                              "defaultValue": "S2",
                              "allowedValues": [
                                "S1",
                                "S2",
                                "S3",
                                "I6"
                              ],
                              "metadata": {
                                "description": "Optional. The tier of the agent pool."
                              }
                            },
                            "agentPoolSubnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the subnet to which the agent pool will be connected."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]",
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2022-02-01-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('acrSku')]"
                              },
                              "properties": {
                                "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                                "encryption": "[if(not(empty(parameters('cMKKeyName'))), createObject('status', 'enabled', 'keyVaultProperties', createObject('identity', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKUserAssignedIdentityResourceId'), '/')[2], split(parameters('cMKUserAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('cMKUserAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId, 'keyIdentifier', if(not(empty(parameters('cMKKeyVersion'))), format('{0}/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[0], split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[1]), '2021-10-01').keyUri, parameters('cMKKeyVersion')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[0], split(format('{0}/{1}', last(split(parameters('cMKKeyVaultResourceId'), '/')), parameters('cMKKeyName')), '/')[1]), '2021-10-01').keyUriWithVersion))), null())]",
                                "policies": {
                                  "azureADAuthenticationAsArmPolicy": {
                                    "status": "[parameters('azureADAuthenticationAsArmPolicyStatus')]"
                                  },
                                  "exportPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('exportPolicyStatus')), null())]",
                                  "quarantinePolicy": {
                                    "status": "[parameters('quarantinePolicyStatus')]"
                                  },
                                  "trustPolicy": {
                                    "type": "Notary",
                                    "status": "[parameters('trustPolicyStatus')]"
                                  },
                                  "retentionPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('days', parameters('retentionPolicyDays'), 'status', parameters('retentionPolicyStatus')), null())]",
                                  "softDeletePolicy": {
                                    "retentionDays": "[parameters('softDeletePolicyDays')]",
                                    "status": "[parameters('softDeletePolicyStatus')]"
                                  }
                                },
                                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSetIpRules'))), 'Disabled', null()))]",
                                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                                "networkRuleSet": "[if(not(empty(parameters('networkRuleSetIpRules'))), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', parameters('networkRuleSetIpRules')), null())]",
                                "zoneRedundancy": "[if(equals(parameters('acrSku'), 'Premium'), parameters('zoneRedundancy'), null())]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.ContainerRegistry/registries/agentPools",
                              "apiVersion": "2019-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('agentPoolName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "count": "[parameters('agentPoolCount')]",
                                "os": "Linux",
                                "tier": "[parameters('agentPoolTier')]",
                                "virtualNetworkSubnetResourceId": "[parameters('agentPoolSubnetId')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                              ],
                              "metadata": {
                                "description": "This agentPool associated with the Azure subnet, will be used to build docker image in ACR build task."
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the Azure container registry."
                              },
                              "value": "[parameters('name')]"
                            },
                            "loginServer": {
                              "type": "string",
                              "metadata": {
                                "description": "The reference to the Azure container registry."
                              },
                              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure container registry."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Azure container registry."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                            },
                            "systemAssignedPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2022-02-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2022-02-01-preview', 'full').identity.principalId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2022-02-01-preview', 'full').location]"
                            },
                            "agentPoolName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of Azure container registry agent pool, used for docker image build."
                              },
                              "value": "[parameters('agentPoolName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('containerRegistryNetworkDeployment-{0}', deployment().name), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "azServicePrivateDnsZoneName": {
                            "value": "[variables('privateDnsZoneNames')]"
                          },
                          "azServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('containerRegistryPrivateEndpointName')]"
                          },
                          "privateEndpointSubResourceName": {
                            "value": "[variables('containerRegistryResourceName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('spokeVNetLinks')]"
                          },
                          "subnetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          },
                          "vnetHubResourceId": {
                            "value": "[parameters('hubVNetId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "12524734430243079913"
                            }
                          },
                          "parameters": {
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "vnetHubResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "if empty, private dns zone will be deployed in the current RG scope"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
                              }
                            },
                            "azServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
                              }
                            },
                            "azServicePrivateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource name of the Private Endpoint"
                              }
                            },
                            "privateEndpointSubResourceName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
                              }
                            }
                          },
                          "variables": {
                            "vnetHubSplitTokens": "[if(contains(parameters('vnetHubResourceId'), '/'), split(parameters('vnetHubResourceId'), '/'), array(''))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                                  },
                                  "virtualNetworkLinks": {
                                    "value": "[parameters('virtualNetworkLinks')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "2426523317982693557"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "virtualNetworkLinks": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of A records to be added to the DNS Zone"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "global",
                                      "tags": "[parameters('tags')]"
                                    },
                                    {
                                      "copy": {
                                        "name": "privateDnsZoneLink",
                                        "count": "[length(parameters('virtualNetworkLinks'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2018-09-01",
                                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                                      "location": "global",
                                      "properties": {
                                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "dnsARecord",
                                        "count": "[length(parameters('aRecords'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                                      "properties": {
                                        "ttl": 60,
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('privateEndpointName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "privateDnsZonesId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                                  },
                                  "privateLinkServiceId": {
                                    "value": "[parameters('azServiceId')]"
                                  },
                                  "snetId": {
                                    "value": "[parameters('subnetId')]"
                                  },
                                  "subresource": {
                                    "value": "[parameters('privateEndpointSubResourceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "17789342952655051459"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 2,
                                      "maxLength": 64,
                                      "metadata": {
                                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "snetId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                                      }
                                    },
                                    "subresource": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                                      }
                                    },
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "subnet": {
                                          "id": "[parameters('snetId')]"
                                        },
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[format('pl-{0}', parameters('name'))]",
                                            "properties": {
                                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                              "groupIds": [
                                                "[parameters('subresource')]"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "config1",
                                            "properties": {
                                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('containerRegistryPullRoleAssignmentDeployment-{0}', deployment().name), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-containerRegistryPullRoleAssignment"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerRegistryUserAssignedIdentityName')), '2018-11-30').principalId]"
                          },
                          "resourceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                          },
                          "roleDefinitionId": {
                            "value": "[variables('containerRegistryPullRoleGuid')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "13270559252179313794"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ],
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              }
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerRegistryUserAssignedIdentityName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "containerRegistryId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the container registry."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.name.value]"
                    },
                    "containerRegistryLoginServer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry login server."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.loginServer.value]"
                    },
                    "containerRegistryUserAssignedIdentityId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned managed identity for the container registry to be able to pull images from it."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('containerRegistryUserAssignedIdentityName'))]"
                    },
                    "containerRegistryAgentPoolName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of Azure container registry agent pool name to build images"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerRegistryNameDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.agentPoolName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Container Registry, where all workload images should be pulled from."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('keyVault-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.keyVault]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetName": {
                    "value": "[variables('hubVNetName')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "keyVaultPrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.keyVaultPep]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2876675266559777822"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "hubVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": " Name of the hub vnet"
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "keyVaultPrivateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to be created for Key Vault."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "AuditEvent",
                        "AzurePolicyEvaluationDetails"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "privateDnsZoneNames": "privatelink.vaultcore.azure.net",
                    "keyVaultResourceName": "vault",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "spokeVNetLinks": "[concat(createArray(createObject('vnetName', variables('spokeVNetName'), 'vnetId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName')), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetName'))), createArray(createObject('vnetName', parameters('hubVNetName'), 'vnetId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny"
                        },
                        "enableSoftDelete": false,
                        "softDeleteRetentionInDays": 7,
                        "enablePurgeProtection": null,
                        "publicNetworkAccess": "Disabled",
                        "enableRbacAuthorization": true,
                        "enabledForTemplateDeployment": true
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('keyVaultName')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('keyVaultNetwork-{0}', uniqueString(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "azServicePrivateDnsZoneName": {
                            "value": "[variables('privateDnsZoneNames')]"
                          },
                          "azServiceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('keyVaultPrivateEndpointName')]"
                          },
                          "privateEndpointSubResourceName": {
                            "value": "[variables('keyVaultResourceName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('spokeVNetLinks')]"
                          },
                          "subnetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          },
                          "vnetHubResourceId": {
                            "value": "[parameters('hubVNetId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "12524734430243079913"
                            }
                          },
                          "parameters": {
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "vnetHubResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "if empty, private dns zone will be deployed in the current RG scope"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
                              }
                            },
                            "azServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
                              }
                            },
                            "azServicePrivateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource name of the Private Endpoint"
                              }
                            },
                            "privateEndpointSubResourceName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
                              }
                            }
                          },
                          "variables": {
                            "vnetHubSplitTokens": "[if(contains(parameters('vnetHubResourceId'), '/'), split(parameters('vnetHubResourceId'), '/'), array(''))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                                  },
                                  "virtualNetworkLinks": {
                                    "value": "[parameters('virtualNetworkLinks')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "2426523317982693557"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "virtualNetworkLinks": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of A records to be added to the DNS Zone"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "global",
                                      "tags": "[parameters('tags')]"
                                    },
                                    {
                                      "copy": {
                                        "name": "privateDnsZoneLink",
                                        "count": "[length(parameters('virtualNetworkLinks'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2018-09-01",
                                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                                      "location": "global",
                                      "properties": {
                                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "dnsARecord",
                                        "count": "[length(parameters('aRecords'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                                      "properties": {
                                        "ttl": 60,
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('privateEndpointName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "privateDnsZonesId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                                  },
                                  "privateLinkServiceId": {
                                    "value": "[parameters('azServiceId')]"
                                  },
                                  "snetId": {
                                    "value": "[parameters('subnetId')]"
                                  },
                                  "subresource": {
                                    "value": "[parameters('privateEndpointSubResourceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "17789342952655051459"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 2,
                                      "maxLength": 64,
                                      "metadata": {
                                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "snetId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                                      }
                                    },
                                    "subresource": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                                      }
                                    },
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "subnet": {
                                          "id": "[parameters('snetId')]"
                                        },
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[format('pl-{0}', parameters('name'))]",
                                            "properties": {
                                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                              "groupIds": [
                                                "[parameters('subresource')]"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "config1",
                                            "properties": {
                                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('keyVaultName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Key Vault used to hold items like TLS certs and application secrets that your workload will need."
              }
            },
            {
              "condition": "[parameters('deployRedisCache')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('redisCache-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "redisName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.redisCache]"
                  },
                  "logAnalyticsWsId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultName.value]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetName": {
                    "value": "[variables('hubVNetName')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "redisCachePrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.redisCachePep]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2460645228688089225"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created. This needs to be the same region as the spoke."
                      }
                    },
                    "redisName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the redis cache to be created."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "hubVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": " Name of the hub vnet"
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "redisCachePrivateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to be created for Redis Cache."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed key vault"
                      }
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics Workspace Id"
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZoneNames": "privatelink.redis.cache.windows.net",
                    "redisResourceName": "redisCache",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "spokeVNetLinks": "[concat(createArray(createObject('vnetName', variables('spokeVNetName'), 'vnetId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName')), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetName'))), createArray(createObject('vnetName', parameters('hubVNetName'), 'vnetId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('redis-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('redisName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "keyvaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "enableNonSslPort": {
                            "value": false
                          },
                          "skuName": {
                            "value": "Premium"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('logAnalyticsWsId')]"
                          },
                          "hasPrivateLink": {
                            "value": true
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "17587276910576551486"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 63,
                              "metadata": {
                                "description": "Required. The name of the Redis cache resource. Start and end with alphanumeric. Consecutive hyphens not allowed"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location to deploy the Redis cache service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "keyvaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
                              }
                            },
                            "enableNonSslPort": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether the non-ssl Redis server port (6379) is enabled."
                              }
                            },
                            "redisConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."
                              }
                            },
                            "replicasPerMaster": {
                              "type": "int",
                              "defaultValue": 1,
                              "minValue": 1,
                              "metadata": {
                                "description": "Optional. The number of replicas to be created per primary."
                              }
                            },
                            "replicasPerPrimary": {
                              "type": "int",
                              "defaultValue": 1,
                              "minValue": 1,
                              "metadata": {
                                "description": "Optional. The number of replicas to be created per primary."
                              }
                            },
                            "shardCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "minValue": 1,
                              "metadata": {
                                "description": "Optional. The number of shards to be created on a Premium Cluster Cache."
                              }
                            },
                            "capacity": {
                              "type": "int",
                              "defaultValue": 2,
                              "allowedValues": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                              ],
                              "metadata": {
                                "description": "Optional. The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "allowedValues": [
                                "Basic",
                                "Premium",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional, default is Standard. The type of Redis cache to deploy."
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "allLogs",
                                "ConnectedClientList"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "hasPrivateLink": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Has the resource private endpoint?"
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Cache/redis",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                                "minimumTlsVersion": "1.2",
                                "publicNetworkAccess": "[if(parameters('hasPrivateLink'), 'Disabled', null())]",
                                "redisConfiguration": "[if(not(empty(parameters('redisConfiguration'))), parameters('redisConfiguration'), null())]",
                                "redisVersion": "6",
                                "replicasPerMaster": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerMaster'), null())]",
                                "replicasPerPrimary": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerPrimary'), null())]",
                                "shardCount": "[if(equals(parameters('skuName'), 'Premium'), parameters('shardCount'), null())]",
                                "sku": {
                                  "capacity": "[parameters('capacity')]",
                                  "family": "[if(equals(parameters('skuName'), 'Premium'), 'P', 'C')]",
                                  "name": "[parameters('skuName')]"
                                },
                                "subnetId": "[if(not(empty(parameters('subnetId'))), parameters('subnetId'), null())]"
                              },
                              "zones": "[if(equals(parameters('skuName'), 'Premium'), pickZones('Microsoft.Cache', 'redis', parameters('location'), 1), null())]"
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2023-02-01",
                              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'redisConStrSecret')]",
                              "properties": {
                                "value": "[format('{0},password={1},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').hostName, listKeys(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').primaryKey)]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": null,
                                "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                                "eventHubAuthorizationRuleId": null,
                                "eventHubName": null,
                                "metrics": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsMetrics'))]",
                                "logs": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsLogs'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource name."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID."
                              },
                              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Redis cache was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "hostName": {
                              "type": "string",
                              "metadata": {
                                "description": "Redis hostname."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').hostName]"
                            },
                            "sslPort": {
                              "type": "int",
                              "metadata": {
                                "description": "Redis SSL port."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').sslPort]"
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The full resource ID of a subnet in a virtual network where the Redis cache was deployed in."
                              },
                              "value": "[if(not(empty(parameters('subnetId'))), reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01').subnetId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2022-06-01', 'full').location]"
                            },
                            "redisConnectionStringSecretName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secret in keyvault, holding the connection string to redis."
                              },
                              "value": "redisConStrSecret"
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "Azure Redis Cache used for your workload."
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('redisPrivateNetworking-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "azServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('redis-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "azServicePrivateDnsZoneName": {
                            "value": "[variables('privateDnsZoneNames')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('redisCachePrivateEndpointName')]"
                          },
                          "privateEndpointSubResourceName": {
                            "value": "[variables('redisResourceName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('spokeVNetLinks')]"
                          },
                          "subnetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          },
                          "vnetHubResourceId": {
                            "value": "[parameters('hubVNetId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "12524734430243079913"
                            }
                          },
                          "parameters": {
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "vnetHubResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "if empty, private dns zone will be deployed in the current RG scope"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
                              }
                            },
                            "azServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
                              }
                            },
                            "azServicePrivateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource name of the Private Endpoint"
                              }
                            },
                            "privateEndpointSubResourceName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The region (location) in which the resource will be deployed. Default: resource group location."
                              }
                            }
                          },
                          "variables": {
                            "vnetHubSplitTokens": "[if(contains(parameters('vnetHubResourceId'), '/'), split(parameters('vnetHubResourceId'), '/'), array(''))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('azServicePrivateDnsZoneName')]"
                                  },
                                  "virtualNetworkLinks": {
                                    "value": "[parameters('virtualNetworkLinks')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "2426523317982693557"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "virtualNetworkLinks": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of A records to be added to the DNS Zone"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "global",
                                      "tags": "[parameters('tags')]"
                                    },
                                    {
                                      "copy": {
                                        "name": "privateDnsZoneLink",
                                        "count": "[length(parameters('virtualNetworkLinks'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2018-09-01",
                                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                                      "location": "global",
                                      "properties": {
                                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "dnsARecord",
                                        "count": "[length(parameters('aRecords'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                                      "properties": {
                                        "ttl": 60,
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('privateEndpointName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "privateDnsZonesId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                                  },
                                  "privateLinkServiceId": {
                                    "value": "[parameters('azServiceId')]"
                                  },
                                  "snetId": {
                                    "value": "[parameters('subnetId')]"
                                  },
                                  "subresource": {
                                    "value": "[parameters('privateEndpointSubResourceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "17789342952655051459"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 2,
                                      "maxLength": 64,
                                      "metadata": {
                                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "snetId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                                      }
                                    },
                                    "subresource": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                                      }
                                    },
                                    "privateDnsZonesId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "subnet": {
                                          "id": "[parameters('snetId')]"
                                        },
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[format('pl-{0}', parameters('name'))]",
                                            "properties": {
                                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                              "groupIds": [
                                                "[parameters('subresource')]"
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "config1",
                                            "properties": {
                                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('redis-{0}', uniqueString(resourceGroup().id)))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "redisCacheSecretKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The secret name to retrieve the connection string from KeyVault"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('redis-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.redisConnectionStringSecretName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id)))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ]
            },
            {
              "condition": "[parameters('deployOpenAi')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take('openAiModule-Deployment', 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.openAiAccount]"
                  },
                  "deploymentName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.openAiDeployment]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vnetHubResourceId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "logAnalyticsWsId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "deployOpenAiGptModel": {
                    "value": "[parameters('deployOpenAiGptModel')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetName": {
                    "value": "[variables('hubVNetName')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "10351444179327580338"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of the OpenAI Account. Must be globally unique. Only alphanumeric characters and hyphens are allowed. The value must be 2-64 characters long and cannot start or end with a hyphen"
                      }
                    },
                    "deploymentName": {
                      "type": "string",
                      "defaultValue": "testGPT35",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of the sample deployment. Deployment Name can have only letters and numbers, no spaces. Hyphens (\"-\") and underscores (\"_\") may be used, except as ending characters."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The location to deploy the Redis cache service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "hubVNetName": {
                      "type": "string",
                      "metadata": {
                        "description": " Name of the hub vnet"
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "vnetHubResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "if empty, private dns zone will be deployed in the current RG scope"
                      }
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "An existing Log Analytics WS Id for creating app Insights, diagnostics etc."
                      }
                    },
                    "deployOpenAiGptModel": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Deploy (or not) a model on the openAI Account. This is used only as a sample to show how to deploy a model on the OpenAI account."
                      }
                    }
                  },
                  "variables": {
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "spokeVNetLinks": "[concat(createArray(createObject('vnetName', variables('spokeVNetName'), 'vnetId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName')), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetName'))), createArray(createObject('vnetName', parameters('hubVNetName'), 'vnetId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]",
                    "vnetHubSplitTokens": "[if(not(empty(parameters('vnetHubResourceId'))), split(parameters('vnetHubResourceId'), '/'), array(''))]",
                    "openAiDnsZoneName": "privatelink.openai.azure.com"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('openAI-{0}-Deployment', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "hasPrivateLinks": {
                            "value": true
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "name": "OpenAI-Default-Diag",
                                "workspaceResourceId": "[parameters('logAnalyticsWsId')]"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "13637851774072702191"
                            },
                            "name": "Cognitive Services",
                            "description": "This module deploys a Cognitive Service.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                                    }
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        },
                                        "groupId": {
                                          "type": "string"
                                        },
                                        "memberName": {
                                          "type": "string"
                                        },
                                        "privateIpAddress": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "manualPrivateLinkServiceConnections": {
                                    "type": "array",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Manual PrivateLink Service Connections."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to 'AllMetrics' to collect all metrics."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Name of the OpenAI Account. Must be globally unique. Only alphanumeric characters and hyphens are allowed. The value must be 2-64 characters long and cannot start or end with a hyphen"
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "OpenAI",
                              "allowedValues": [
                                "AnomalyDetector",
                                "Bing.Autosuggest.v7",
                                "Bing.CustomSearch",
                                "Bing.EntitySearch",
                                "Bing.Search.v7",
                                "Bing.SpellCheck.v7",
                                "CognitiveServices",
                                "ComputerVision",
                                "ContentModerator",
                                "CustomVision.Prediction",
                                "CustomVision.Training",
                                "Face",
                                "FormRecognizer",
                                "ImmersiveReader",
                                "Internal.AllInOne",
                                "LUIS",
                                "LUIS.Authoring",
                                "Personalizer",
                                "QnAMaker",
                                "SpeechServices",
                                "TextAnalytics",
                                "TextTranslation",
                                "OpenAI"
                              ],
                              "metadata": {
                                "description": "Default is OpenAI. Kind of the Cognitive Services. Find available Kind-SKUs compination by running `az cognitiveservices account list-skus --kind OpenAI --location EASTUS2`  Check here: https://learn.microsoft.com/azure/ai-services/create-account-bicep?tabs=CLI."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "defaultValue": "S0",
                              "allowedValues": [
                                "C2",
                                "C3",
                                "C4",
                                "F0",
                                "F1",
                                "S",
                                "S0",
                                "S1",
                                "S10",
                                "S2",
                                "S3",
                                "S4",
                                "S5",
                                "S6",
                                "S7",
                                "S8",
                                "S9"
                              ],
                              "metadata": {
                                "description": "Optional. Default is S0 for OpenAI. SKU of the Cognitive Services resource. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                              }
                            },
                            "customSubDomainName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. Subdomain name used for token-based authentication. Required if 'networkAcls' or 'privateEndpoints' are set."
                              }
                            },
                            "networkAcls": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. A collection of rules governing the accessibility from specific network locations."
                              }
                            },
                            "hasPrivateLinks": {
                              "type": "bool",
                              "metadata": {
                                "description": "Whether the resource has private links or not"
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional, default is true. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Conditional. The ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "allowedFqdnList": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of allowed FQDN."
                              }
                            },
                            "apiProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The API properties for special APIs."
                              }
                            },
                            "disableLocalAuth": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Allow only Azure AD authentication. Should be enabled for security reasons."
                              }
                            },
                            "cMKKeyVaultResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The resource ID of a key vault to reference a customer managed key for encryption from. Required if 'cMKKeyName' is not empty."
                              }
                            },
                            "cMKKeyName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
                              }
                            },
                            "cMKUserAssignedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
                              }
                            },
                            "cMKKeyVersion": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
                              }
                            },
                            "dynamicThrottlingEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The flag to enable dynamic throttling."
                              }
                            },
                            "migrationToken": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource migration token."
                              }
                            },
                            "restore": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Restore a soft-deleted cognitive service at deployment time. Will fail if no such soft-deleted resource exists."
                              }
                            },
                            "restrictOutboundNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Restrict outbound network access."
                              }
                            },
                            "userOwnedStorage": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The storage accounts for this resource."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                              }
                            }
                          },
                          "variables": {
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                              "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                              "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                              "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                              "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                              "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                              "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                              "Cognitive Services Face Recognizer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9894cab4-e18a-44aa-828b-cb588cd6f2d7')]",
                              "Cognitive Services Immersive Reader User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b2de6794-95db-4659-8781-7e080d3f2b9d')]",
                              "Cognitive Services Language Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f07febfe-79bc-46b1-8b37-790e26e6e498')]",
                              "Cognitive Services Language Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7628b7b8-a8b2-4cdc-b46f-e9b35248918e')]",
                              "Cognitive Services Language Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2310ca1-dc64-4889-bb49-c8e0fa3d47a8')]",
                              "Cognitive Services LUIS Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f72c8140-2111-481c-87ff-72b910f6e3f8')]",
                              "Cognitive Services LUIS Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e81cdc-4e98-4e29-a639-e7d10c5a6226')]",
                              "Cognitive Services LUIS Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6322a993-d5c9-4bed-b113-e49bbea25b27')]",
                              "Cognitive Services Metrics Advisor Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cb43c632-a144-4ec5-977c-e80c4affc34a')]",
                              "Cognitive Services Metrics Advisor User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3b20f47b-3825-43cb-8114-4bd2201156a8')]",
                              "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
                              "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                              "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                              "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                              "Cognitive Services Speech Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e75ca1e-0464-4b4d-8b93-68208a576181')]",
                              "Cognitive Services Speech User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]",
                              "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "cMKKeyVault::cMKKey": {
                              "condition": "[and(not(empty(parameters('cMKKeyVaultResourceId'))), not(empty(parameters('cMKKeyName'))))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[format('{0}/{1}', last(split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), 'dummyVault'), '/')), if(not(empty(parameters('cMKKeyName'))), parameters('cMKKeyName'), 'dummyKey'))]",
                              "dependsOn": [
                                "cMKKeyVault"
                              ]
                            },
                            "defaultTelemetry": {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            "cMKKeyVault": {
                              "condition": "[not(empty(parameters('cMKKeyVaultResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2021-10-01",
                              "subscriptionId": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(if(not(empty(parameters('cMKKeyVaultResourceId'))), parameters('cMKKeyVaultResourceId'), 'dummyVault'), '/'))]"
                            },
                            "cMKUserAssignedIdentity": {
                              "condition": "[not(empty(parameters('cMKUserAssignedIdentityResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "subscriptionId": "[split(if(not(empty(parameters('cMKUserAssignedIdentityResourceId'))), parameters('cMKUserAssignedIdentityResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(if(not(empty(parameters('cMKUserAssignedIdentityResourceId'))), parameters('cMKUserAssignedIdentityResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(if(not(empty(parameters('cMKUserAssignedIdentityResourceId'))), parameters('cMKUserAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
                            },
                            "cognitiveServices": {
                              "type": "Microsoft.CognitiveServices/accounts",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('name')]",
                              "kind": "[parameters('kind')]",
                              "identity": "[variables('identity')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('sku')]"
                              },
                              "properties": {
                                "customSubDomainName": "[if(not(empty(parameters('customSubDomainName'))), parameters('customSubDomainName'), parameters('name'))]",
                                "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(parameters('hasPrivateLinks'), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                                "allowedFqdnList": "[parameters('allowedFqdnList')]",
                                "apiProperties": "[parameters('apiProperties')]",
                                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                                "encryption": "[if(not(empty(parameters('cMKKeyName'))), createObject('keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createObject('identityClientId', reference('cMKUserAssignedIdentity').clientId, 'keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyName', parameters('cMKKeyName'), 'keyVersion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null())]",
                                "migrationToken": "[if(not(empty(parameters('migrationToken'))), parameters('migrationToken'), null())]",
                                "restore": "[parameters('restore')]",
                                "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]",
                                "userOwnedStorage": "[if(not(empty(parameters('userOwnedStorage'))), parameters('userOwnedStorage'), null())]",
                                "dynamicThrottlingEnabled": "[parameters('dynamicThrottlingEnabled')]"
                              },
                              "dependsOn": [
                                "cMKKeyVault",
                                "cMKUserAssignedIdentity"
                              ]
                            },
                            "cognitiveServices_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "cognitiveServices"
                              ]
                            },
                            "cognitiveServices_diagnosticSettings": {
                              "copy": {
                                "name": "cognitiveServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                                "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'AllLogs', 'enabled', true())))]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "cognitiveServices"
                              ]
                            },
                            "cognitiveServices_roleAssignments": {
                              "copy": {
                                "name": "cognitiveServices_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "cognitiveServices"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the cognitive services account."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the cognitive services account."
                              },
                              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the cognitive services account was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "endpoint": {
                              "type": "string",
                              "metadata": {
                                "description": "The service endpoint of the cognitive services account."
                              },
                              "value": "[reference('cognitiveServices').endpoint]"
                            },
                            "systemAssignedPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference('cognitiveServices', '2023-05-01', 'full').identity, 'principalId')), reference('cognitiveServices', '2023-05-01', 'full').identity.principalId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('cognitiveServices', '2023-05-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[parameters('deployOpenAiGptModel')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('GPT-{0}-Deployment', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "openAiName": {
                            "value": "[parameters('name')]"
                          },
                          "deploymentName": {
                            "value": "[parameters('deploymentName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "3271275319290754298"
                            }
                          },
                          "parameters": {
                            "openAiName": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Name of the existing OpenAI Account"
                              }
                            },
                            "deploymentName": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Deployment Name can have only letters and numbers, no spaces. Hyphens (\"-\") and underscores (\"_\") may be used, except as ending characters."
                              }
                            },
                            "modelName": {
                              "type": "string",
                              "defaultValue": "gpt-35-turbo",
                              "metadata": {
                                "description": "The model name to be deployed. The model name can be found in the OpenAI portal."
                              }
                            },
                            "modelVersion": {
                              "type": "string",
                              "defaultValue": "0613",
                              "metadata": {
                                "description": "The model version to be deployed. At the time of writing this is the latest version is eastus2."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.CognitiveServices/accounts/deployments",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('openAiName'), parameters('deploymentName'))]",
                              "sku": {
                                "name": "Standard",
                                "capacity": 1
                              },
                              "properties": {
                                "raiPolicyName": "Microsoft.Default",
                                "model": {
                                  "format": "OpenAI",
                                  "name": "[parameters('modelName')]",
                                  "version": "[parameters('modelVersion')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('openAI-{0}-Deployment', parameters('name')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-PrivateDnsZoneDeployment', replace(variables('openAiDnsZoneName'), '.', '-')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('openAiDnsZoneName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('spokeVNetLinks')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "2426523317982693557"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of A records to be added to the DNS Zone"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneLink",
                                "count": "[length(parameters('virtualNetworkLinks'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dnsARecord",
                                "count": "[length(parameters('aRecords'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                              "properties": {
                                "ttl": 60,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDnsZonesId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('pe-{0}-Deployment', parameters('name')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[take(format('pe-{0}', parameters('name')), 64)]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZonesId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('openAiDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.privateDnsZonesId.value]"
                          },
                          "privateLinkServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openAI-{0}-Deployment', parameters('name'))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "snetId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                          },
                          "subresource": {
                            "value": "account"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "17789342952655051459"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('openAI-{0}-Deployment', parameters('name')))]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('openAiDnsZoneName'), '.', '-')), 64))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure Open AI account name."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openAI-{0}-Deployment', parameters('name'))), '2022-09-01').outputs.name.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('03-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Container Registry."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryId.value]"
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryName.value]"
            },
            "containerRegistryLoginServer": {
              "type": "string",
              "metadata": {
                "description": "The name of the container registry login server."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryLoginServer.value]"
            },
            "containerRegistryUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user-assigned managed identity for the Azure Container Registry to be able to pull images from it."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
            },
            "containerRegistryAgentPoolName": {
              "type": "string",
              "metadata": {
                "description": "The name of the contianer registry agent pool name to build images"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryAgentPoolName.value]"
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Key Vault."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultId.value]"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Key Vault."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultName.value]"
            },
            "redisCacheSecretKey": {
              "type": "string",
              "metadata": {
                "description": "The secret name to retrieve the connection string from KeyVault"
              },
              "value": "[if(parameters('deployRedisCache'), reference(resourceId('Microsoft.Resources/deployments', format('redisCache-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.redisCacheSecretKey.value, '')]"
            },
            "openAIAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Open AI account name."
              },
              "value": "[if(parameters('deployOpenAi'), reference(resourceId('Microsoft.Resources/deployments', take('openAiModule-Deployment', 64)), '2022-09-01').outputs.name.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "hubVNetId": "[if(parameters('deployHub'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value), createObject('value', ''))]",
          "spokeVNetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetName.value]"
          },
          "spokeInfraSubnetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetName.value]"
          },
          "enableApplicationInsights": {
            "value": "[parameters('enableApplicationInsights')]"
          },
          "enableDaprInstrumentation": {
            "value": "[parameters('enableDaprInstrumentation')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "12778733258320048796"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing spoke virtual network."
              }
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing spoke infrastructure subnet."
              }
            },
            "enableApplicationInsights": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable the createion of Application Insights."
              }
            },
            "enableDaprInstrumentation": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable Dapr application instrumentation using Application Insights. If enableApplicationInsights is false, this parameter is ignored."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable sending usage and telemetry feedback to Microsoft."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of an existing Azure Log Analytics Workspace."
              }
            },
            "deployZoneRedundantResources": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
              }
            },
            "workloadProfile": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional, Add a workload profile."
              }
            }
          },
          "variables": {
            "hubVNetResourceIdTokens": "[if(contains(parameters('hubVNetId'), '/'), split(parameters('hubVNetId'), '/'), array(''))]",
            "hubVNetName": "[if(greater(length(variables('hubVNetResourceIdTokens')), 8), variables('hubVNetResourceIdTokens')[8], '')]",
            "hubSubscriptionId": "[if(greater(length(variables('hubVNetResourceIdTokens')), 2), variables('hubVNetResourceIdTokens')[2], '')]",
            "hubResourceGroupName": "[if(greater(length(variables('hubVNetResourceIdTokens')), 4), variables('hubVNetResourceIdTokens')[4], '')]",
            "telemetryId": "[format('9b4433d6-924a-4c07-b47c-7478619759c7-{0}-acasb', parameters('location'))]",
            "workloadProfiles": "[if(parameters('workloadProfile'), createArray(createObject('name', 'default', 'sku', 'Dedicated', 'capacity', 1, 'tier', 'Standard', 'autoscale', createObject('minReplicas', 1, 'maxReplicas', 4, 'rules', createArray(createObject('name', 'cpu-scaling', 'type', 'cpu', 'metadata', createObject('type', 'Utilization', 'value', '70')))))), createArray())]",
            "spokeVNetLinks": "[concat(createArray(createObject('vnetName', parameters('spokeVNetName'), 'vnetId', resourceId('Microsoft.Network/virtualNetworks', parameters('spokeVNetName')), 'registrationEnabled', false())), if(not(empty(variables('hubVNetName'))), createArray(createObject('vnetName', variables('hubVNetName'), 'vnetId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]"
          },
          "resources": [
            {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[variables('telemetryId')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": {}
                }
              },
              "metadata": {
                "description": "Microsoft telemetry deployment."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('04-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11791113627827812288"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-pep', variables('naming').resourceTypeAbbreviations.networkSecurityGroup)]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]",
                      "mysqlServer": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.mysqlServer), '-', '')), 24)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "condition": "[parameters('enableApplicationInsights')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationInsights]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "9444881259385526781"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Application Insights."
                      }
                    },
                    "appInsightsType": {
                      "type": "string",
                      "defaultValue": "web",
                      "allowedValues": [
                        "web",
                        "other"
                      ],
                      "metadata": {
                        "description": "Optional. Application type."
                      }
                    },
                    "workspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the log analytics workspace which the data will be ingested to. If left empty, applicationInsights will create one for us. This property is required to create an application with this API version. Applications from older versions will not have this property."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "allowedValues": [
                        30,
                        60,
                        90,
                        120,
                        180,
                        270,
                        365,
                        550,
                        730
                      ],
                      "metadata": {
                        "description": "Optional. Retention period in days."
                      }
                    },
                    "samplingPercentage": {
                      "type": "int",
                      "defaultValue": 100,
                      "minValue": 0,
                      "maxValue": 100,
                      "metadata": {
                        "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "Application_Type": "[parameters('appInsightsType')]",
                        "Request_Source": "rest",
                        "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "RetentionInDays": "[parameters('retentionInDays')]",
                        "SamplingPercentage": "[parameters('samplingPercentage')]"
                      }
                    }
                  ],
                  "outputs": {
                    "appInsNname": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application insights component."
                      },
                      "value": "[parameters('name')]"
                    },
                    "appInsResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application insights component."
                      },
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "appInsInstrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The applicationInsights Instrumentation Key."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "appInsConnectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The applicationInsights Connection String."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    },
                    "applicationId": {
                      "type": "string",
                      "metadata": {
                        "description": "The application ID of the application insights component."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').AppId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Application Insights, the workload' log & metric sink and APM tool"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerAppsEnvironment]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "subnetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('spokeVNetName'), parameters('spokeInfraSubnetName'))]"
                  },
                  "vnetEndpointInternal": {
                    "value": true
                  },
                  "appInsightsInstrumentationKey": "[if(and(parameters('enableApplicationInsights'), parameters('enableDaprInstrumentation')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.appInsInstrumentationKey.value), createObject('value', ''))]",
                  "zoneRedundant": {
                    "value": "[parameters('deployZoneRedundantResources')]"
                  },
                  "infrastructureResourceGroupName": {
                    "value": ""
                  },
                  "workloadProfiles": {
                    "value": "[variables('workloadProfiles')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "4886992136537914105"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of your Azure Container Apps Environment. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional, default value is false. Sets if the environment will use availability zones. Your Container App Environment and the apps in it will be zone redundant. This requieres vNet integration."
                      }
                    },
                    "workloadProfiles": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional, the workload profiles required by the end user. The default is \"Consumption\", and is automatically added whether workload profiles are specified or not."
                      }
                    },
                    "vnetEndpointInternal": {
                      "type": "bool",
                      "metadata": {
                        "description": "If true, the endpoint is an internal load balancer. If false the hosted apps are exposed on an internet-accessible IP address "
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Custome vnet configuration for the nevironment. NOTE: Current GA (Feb 2023): The subnet associated with a Container App Environment requires a CIDR prefix of /23 or larger"
                      }
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "optional, default is empty. App Insights instrumentation key provided to Dapr for tracing"
                      }
                    },
                    "infrastructureResourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "optional, default is empty. Resource group for the infrastructure resources (e.g. load balancer, public IP, etc.)"
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "ContainerAppConsoleLogs",
                        "ContainerAppSystemLogs",
                        "AppEnvSpringAppConsoleLogs"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]",
                    "defaultWorkloadProfile": [
                      {
                        "workloadProfileType": "Consumption",
                        "name": "Consumption"
                      }
                    ],
                    "effectiveWorkloadProfiles": "[if(not(equals(parameters('workloadProfiles'), createArray())), concat(variables('defaultWorkloadProfile'), parameters('workloadProfiles')), variables('defaultWorkloadProfile'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "zoneRedundant": "[parameters('zoneRedundant')]",
                        "daprAIInstrumentationKey": "[parameters('appInsightsInstrumentationKey')]",
                        "vnetConfiguration": {
                          "internal": "[parameters('vnetEndpointInternal')]",
                          "infrastructureSubnetId": "[parameters('subnetId')]"
                        },
                        "workloadProfiles": "[variables('effectiveWorkloadProfiles')]",
                        "appLogsConfiguration": {
                          "destination": "azure-monitor"
                        },
                        "infrastructureResourceGroup": "[if(empty(parameters('infrastructureResourceGroupName')), take(format('ME_{0}_{1}', resourceGroup().name, parameters('name')), 63), parameters('infrastructureResourceGroupName'))]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the Azure container app environment."
                      },
                      "value": "[parameters('name')]"
                    },
                    "containerAppsEnvironmentNameId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure container app environment."
                      },
                      "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                    },
                    "containerAppsEnvironmentDefaultDomain": {
                      "type": "string",
                      "metadata": {
                        "description": "The default domain of the Azure container app environment."
                      },
                      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain]"
                    },
                    "containerAppsEnvironmentLoadBalancerIP": {
                      "type": "string",
                      "metadata": {
                        "description": "The Azure container app environment's Load Balancer IP."
                      },
                      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').staticIp]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('04-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The Azure Container Apps (ACA) cluster."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('containerAppsEnvironmentPrivateDnsZone-{0}', uniqueString(resourceGroup().id))]",
              "subscriptionId": "[variables('hubSubscriptionId')]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentDefaultDomain.value]"
                  },
                  "virtualNetworkLinks": {
                    "value": "[variables('spokeVNetLinks')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aRecords": {
                    "value": [
                      {
                        "name": "*",
                        "ipv4Address": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentLoadBalancerIP.value]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2426523317982693557"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ],
              "metadata": {
                "description": "The Private DNS zone containing the ACA load balancer IP"
              }
            }
          ],
          "outputs": {
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Container Apps environment."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentNameId.value]"
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container Apps environment."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.containerAppsEnvironmentName.value]"
            },
            "applicationInsightsName": {
              "type": "string",
              "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.appInsNname.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]"
      ]
    },
    {
      "condition": "[parameters('deployHelloWorldSample')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('helloWorlSampleApp-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "containerRegistryUserAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
          },
          "containerAppsEnvironmentId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "11285583712207060591"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the Azure Container Apps instances."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "helloWorldContainerAppName": {
              "type": "string",
              "defaultValue": "ca-simple-hello",
              "minLength": 2,
              "maxLength": 32,
              "metadata": {
                "description": "Optional. The name of the Container App. If set, it overrides the name generated by the template."
              }
            },
            "containerRegistryUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing user-assigned managed identity to be assigned to the Container App to be able to pull images from the container registry."
              }
            },
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing Container Apps environment in which the Container App will be deployed."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('helloWorldContainerAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('containerRegistryUserAssignedIdentityId'))]": {}
                }
              },
              "properties": {
                "configuration": {
                  "activeRevisionsMode": "single",
                  "ingress": {
                    "allowInsecure": false,
                    "external": true,
                    "targetPort": 80,
                    "transport": "auto"
                  },
                  "registries": [],
                  "secrets": []
                },
                "environmentId": "[parameters('containerAppsEnvironmentId')]",
                "workloadProfileName": "Consumption",
                "template": {
                  "containers": [
                    {
                      "name": "simple-hello",
                      "image": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
                      "resources": {
                        "cpu": "[json('0.25')]",
                        "memory": "0.5Gi"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": 1,
                    "maxReplicas": 10
                  },
                  "volumes": []
                }
              },
              "metadata": {
                "description": "The \"Hello World\" Container App."
              }
            }
          ],
          "outputs": {
            "helloWorldAppFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the \"Hello World\" Container App."
              },
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('helloWorldContainerAppName')), '2023-05-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    },
    {
      "condition": "[parameters('deployHelloWorldSample')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('applicationGateway-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "applicationGatewayCertificateKeyName": {
            "value": "[parameters('applicationGatewayCertificateKeyName')]"
          },
          "applicationGatewayFqdn": {
            "value": "[parameters('applicationGatewayFqdn')]"
          },
          "applicationGatewayPrimaryBackendEndFqdn": "[if(parameters('deployHelloWorldSample'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('helloWorlSampleApp-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.helloWorldAppFqdn.value), createObject('value', ''))]",
          "applicationGatewaySubnetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetId.value]"
          },
          "enableApplicationGatewayCertificate": {
            "value": "[parameters('enableApplicationGatewayCertificate')]"
          },
          "keyVaultId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultId.value]"
          },
          "deployZoneRedundantResources": {
            "value": "[parameters('deployZoneRedundantResources')]"
          },
          "ddosProtectionMode": {
            "value": "[parameters('ddosProtectionMode')]"
          },
          "applicationGatewayLogAnalyticsId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "14213925925730264811"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "applicationGatewayFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the Application Gateawy. Must match the TLS certificate."
              }
            },
            "applicationGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The existing subnet resource ID to use for Application Gateway."
              }
            },
            "applicationGatewayPrimaryBackendEndFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the primary backend endpoint."
              }
            },
            "appGatewayBackendHealthProbePath": {
              "type": "string",
              "defaultValue": "/",
              "metadata": {
                "description": "The path to use for Application Gateway's backend health probe."
              }
            },
            "enableApplicationGatewayCertificate": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable Application Gateway certificate (PFX)."
              }
            },
            "applicationGatewayCertificateKeyName": {
              "type": "string",
              "metadata": {
                "description": "The name of the certificate key to use for Application Gateway certificate."
              }
            },
            "applicationGatewayLogAnalyticsId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the exsiting Log Analytics workload for diagnostic settngs, or nothing if you don't need any."
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing Key Vault which contains Application Gateway's cert."
              }
            },
            "deployZoneRedundantResources": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
              }
            },
            "ddosProtectionMode": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled",
                "VirtualNetworkInherited"
              ],
              "metadata": {
                "description": "Optional. DDoS protection mode for the Public IP of the Application Gateway. See https://learn.microsoft.com/azure/ddos-protection/ddos-protection-sku-comparison#skus"
              }
            }
          },
          "variables": {
            "$fxv#0": "MIIKbwIBAzCCCiUGCSqGSIb3DQEHAaCCChYEggoSMIIKDjCCBIIGCSqGSIb3DQEHBqCCBHMwggRvAgEAMIIEaAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAib0WJNTWKS7AICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEHW9eewF9XfBaswcMEeJDKGAggQAPp4/eKGKvqc14RcyYpHwyrMnKmI1B9zu4Up0HZt8HdSKvGtlpQx488J516i/nvJuOjuPhDGTdCCHHM70r+ythml4h1k3OEXqUFeR9U9ENJY8GwMgjKjF1Dw1ZI7HtXsPHLlH6uthTqfLJXRkbSh1JDxyQEV7jMI54X5cy1nvenXhJ39xjk/ZhK2BouZnxxaK6r/x4vLCVqwnvvcmaAG53cF8k0oPcdxdoHnE3yQRrBEPJjHmfufZ6BpqXMfV3qRbDid2UoakEhyzLnCbh9UsT/i4BzBvzPoApDY03OM9MLc3r3+BCLjfFSdVsXKf1/+0ZbPP/T6ex1o57E2k1dCWAYNLUTG1dMoEfh8qJ7iNw18RWwvgzQTCVYDAHrMt1FVrjncS1rKQ91SR0lx7UqiOVRL5hH5q6zLJwelQ8AMij7bq8sMMqQnnNudX1XqE5eWzSCFU+qFTx1aegzve98on3NRIjdDhGs0I8fmCSFQ1JQiteMIpHwSVeSf2EJqfI+1ORrDw5FqVGCgUcjD4hNXylVutwzHvqogvL88ktMQuuzBlTO+JJtRBjMakcYaWHm3pTlc/6FYbAOQq9NeiKLreo3Onvd6VUPFhSaTxj6Yc+QVEMTNlvu2fD4aF49XlsNXiYD89Hppgjzyq+65rcWP3X0B4FKRZBgp3T11iTdsMZvjsFWeWQ8S7tfbGGiff4xo8JktKzA/lN8exZEQqccMUWKNUkL5ovWjuLlhVOroUeFE56fseI3CVcfgSOk9C7d21vbP/+sY5lZAKCHguX1w+Qsrw2rGpKXhF8bEPPjEAC4X/qw6YfxZSbP5YSs7fCqJtDLi8aaNUo8U90yAOwDoCPNJNb4IkCiuXrMAFND9p7+lFZe3L0CPO8Zc3XmV78xVHoHpQ3Gp2cEMBWpQULEj2m/FBnLOjbQ0o8mRQFdKbHfX8kvCPAVpqFFCei4+XyypMjAu4v6N6nJm3Ze4PPu0TTBEbS9Bo0mKjLDXtob1GqsStQ74SuwAokqGJyJSwTP9gaAuAFmdf56FRnIR0MvdT7eTe4I5q3VOZWWPl6zMs8MaP9lRSom8CaBK97N5n427VE0YaAERTies071M7j1/z5TavAYcde4w8phrnkE+PQpZbg0dIgINBrQAWOu5fUBLj6Y2JWudNn5h7bNMuU6RPRsJHf8nY13GBFVyoRfeXHSLE09GQ2EkOn/PslDYyKIIDnhVFKFLwGQSuGnmWMRTYd0Li9NN9PzKewrStwuEMW7Qwh2Gs4Zj7XUkCSmpX5eUQ9S09Zugo+G7vF6HdedN4HTcPpccaZ9kz6A+iEAxxWKSYkJXAmpss2Ol7D6Gl49zAexyrffIL9r0dYKZM7O+i7jCCBYQGCSqGSIb3DQEHAaCCBXUEggVxMIIFbTCCBWkGCyqGSIb3DQEMCgECoIIFMTCCBS0wVwYJKoZIhvcNAQUNMEowKQYJKoZIhvcNAQUMMBwECKJcTO/NpFybAgIIADAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQ3lO4+tUQ8LNz1gjulWNrpQSCBNAt6xylV++Av6DETcLjtNObdmwya3/twJsa58rW+VZTF3juXoskqDcWG3x9d2TIVySedo8K6ou5dzxPsyky+5+/hXMlYdjmXpboYL90tRg4ysjXsYmFxpEm8tcTv6pC58ayynB0d80Be1OwnMMCUhYYnj+4opFd6xK+Xehm//5XOUD3jyk9BfxptBrGyPG+halNhHnqbP7w1fv/eNRLXOGS5Uoaq7e5GwiIAHXyOiC3CDfEgtiZisGXKC5JRHYDt+gsjqwowmYF/x21etsJf79z1zx0F5Eu+V5BYaQ8sLevW5pnxwX2WvQ75gL9slICcyzt5NQ3i7qAzF/me0z6MmMXrsP+4QsC84xL13qYvc3u9Tja4XIpCLxoTxCFkI67zgqB4DQwst92sNwsGYAZry9Fjlt/icgN9R9k+ksrycOcEMkertZ9BiVZyk0UOBRalLNLcYNqUhvqmW1QSB+upgLRGgXOcxcygUXlWhHPIZ71I2wrDdb1Yn6zyeaTkjQo5J6VAMCuZ8gT7p+aTF33t3NEKShTfugBOoL6Np2d8Jfo4L7GITn4Kw24WoJFmwwjzFzq42WnuBuhkiKPTOGahFdl4pYkQSr054LU/GXKJrIQX3Pn2geeRLvMbddp2dk4yDCbE63EQxyXHfdGqXDrR8S6sShs59X5Qj/uJxXw6+gTLTOmjKd841zJE80fd8rwQYXq3v8+iqYKV1hERfTtqqXZuYmFkJjDenlzQmCIFzicHl4ltymV3X5Q2FRdsC9jne8CtqGBut3naeayJwhUKbc9gvF5u9EQBT3y7+BSgUcnBboaFWd41RUHD5uuZrTUsr3a61M77p6+SLl0mLHnnHCIzUHiB70cNrrUVmr6FyW46qhZ6g8sxUPw3E4K73eM/YWDPkv+xcawcwWwKGKATXoCwvcfuX6qpVQIKG1SQ0fz5D+4DULU/IY4S+dSrJk3AIbO+BkraLmPWc1mqNlVezo04xojEkahER2X9g0iEhDL65X4JezMontJJ8hVKDhbnvLN3rfFXIqcRzc0lmPD28VGC9y5X2VqcEuRDI9iLz9r18j5TTSRgWeRLj/AVeJL4i17M0x3jBhev4zJvZ8YO51pfAP4Pj2Q/MgJNRDLb2aPro7uTt8Wq2yECvHSgRILDrEQcK5fIbEpBU89+jXJcqjENCI81fP87oPHiIyS97NVhhU6GKL5Gx14EKUPu5JEA0n2n1M3AciYAAJs6G/XzcJQK6n8z83Wx6nu6crwFBbq8M5UMKJBXtUGRQIxRxpT6f7UhWJOTyGwr7c05c8TsloVgSLSjSnBdF2gv90ups9ZzcZheLtRqS395zciyPyncPLH9dMmz5WhLlZbFnIsWpoP6BRgyU/0AsJJstmXfYhv6/iC/PIHDdmcyaTF8q+WYKj9yGGvUBYI30USQzUbWV7Q18mskHS0HHF/vJtkOS8nLQxD7C1yZDDW4r0/vGjaklWCkRuLgjAR90TYXUV8ezfNrQpRyPohvU/4i1/WQpyPV9zOllLbBTj5a34y675DZ7np9stKRKlGWfIwSvfMp8pX2jV4P5vcFN0IZOaFhTC5hMC9RVeZzfW47BEFlAvbp9GdwgdnSLi6fsXC3NXDJ9l/I7pysCxptwalsK66BZBR+DElMCMGCSqGSIb3DQEJFTEWBBRYa3G5zDyNDmnDtwqNJ75gWXpYmTBBMDEwDQYJYIZIAWUDBAIBBQAEIGOuaxQnb7HkLGdd0HlJvhVruHiNPa/nw0DB7E1JwZjxBAj69WXROxcQcAICCAA=",
            "keyVaultIdTokens": "[split(parameters('keyVaultId'), '/')]",
            "keyVaultSubscriptionId": "[variables('keyVaultIdTokens')[2]]",
            "keyVaultResourceGroupName": "[variables('keyVaultIdTokens')[4]]",
            "keyVaultName": "[variables('keyVaultIdTokens')[8]]",
            "applicationGatewayCertificatePath": "configuration/acahello.demoapp.com.pfx"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11791113627827812288"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\r\n    \"resourceTypeAbbreviations\" : {\r\n        \"applicationGateway\": \"agw\",\r\n        \"applicationInsights\": \"appi\",\r\n        \"appService\": \"app\",\r\n        \"azureFirewall\": \"azfw\",\r\n        \"bastion\": \"bas\",\r\n        \"containerAppsEnvironment\": \"cae\",\r\n        \"containerRegistry\": \"cr\",\r\n        \"cosmosDbNoSql\": \"cosno\",\r\n        \"frontDoor\": \"afd\",\r\n        \"frontDoorEndpoint\": \"fde\",\r\n        \"frontDoorWaf\": \"fdfp\",\r\n        \"keyVault\": \"kv\",\r\n        \"logAnalyticsWorkspace\": \"log\",\r\n        \"managedIdentity\": \"id\",\r\n        \"networkInterface\": \"nic\",\r\n        \"networkSecurityGroup\": \"nsg\",\r\n        \"privateEndpoint\": \"pep\",\r\n        \"privateLinkService\": \"pls\",\r\n        \"publicIpAddress\": \"pip\",\r\n        \"resourceGroup\": \"rg\",\r\n        \"routeTable\": \"rt\",\r\n        \"serviceBus\": \"sb\",\r\n        \"serviceBusQueue\": \"sbq\",\r\n        \"serviceBusTopic\": \"sbt\",\r\n        \"storageAccount\": \"st\",\r\n        \"virtualMachine\": \"vm\",\r\n        \"virtualNetwork\": \"vnet\",\r\n        \"redisCache\": \"redis\",\r\n        \"cognitiveAccount\": \"cog\",\r\n        \"openAiDeployment\": \"oaidep\",\r\n        \"azureAISearch\": \"srch\",\r\n        \"documentIntelligence\": \"di\",\r\n        \"eventGridSystemTopic\": \"egst\",\r\n        \"eventGridSubscription\": \"evgs\",\r\n        \"mysqlServer\": \"mysql\"\r\n    },\r\n\r\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\r\n    \"regionAbbreviations\" : {\r\n        \"australiacentral\": \"auc\",\r\n        \"australiacentral2\": \"auc2\",\r\n        \"australiaeast\": \"aue\",\r\n        \"australiasoutheast\": \"ause\",\r\n        \"brazilsouth\": \"brs\",\r\n        \"brazilsoutheast\": \"brse\",\r\n        \"canadacentral\": \"canc\",\r\n        \"canadaeast\": \"cane\",\r\n        \"centralindia\": \"cin\",\r\n        \"centralus\": \"cus\",\r\n        \"centraluseuap\": \"cuseuap\",\r\n        \"eastasia\": \"ea\",\r\n        \"eastus\": \"eus\",\r\n        \"eastus2\": \"eus2\",\r\n        \"eastus2euap\": \"eus2euap\",\r\n        \"francecentral\": \"frc\",\r\n        \"francesouth\": \"frs\",\r\n        \"germanynorth\": \"gern\",\r\n        \"germanywestcentral\": \"gerwc\",\r\n        \"japaneast\": \"jae\",\r\n        \"japanwest\": \"jaw\",\r\n        \"jioindiacentral\": \"jioinc\",\r\n        \"jioindiawest\": \"jioinw\",\r\n        \"koreacentral\": \"koc\",\r\n        \"koreasouth\": \"kors\",\r\n        \"northcentralus\": \"ncus\",\r\n        \"northeurope\": \"neu\",\r\n        \"norwayeast\": \"nore\",\r\n        \"norwaywest\": \"norw\",\r\n        \"southafricanorth\": \"san\",\r\n        \"southafricawest\": \"saw\",\r\n        \"southcentralus\": \"scus\",\r\n        \"southeastasia\": \"sea\",\r\n        \"southindia\": \"sin\",\r\n        \"swedencentral\": \"swc\",\r\n        \"switzerlandnorth\": \"swn\",\r\n        \"switzerlandwest\": \"sww\",\r\n        \"uaecentral\": \"uaec\",\r\n        \"uaenorth\": \"uaen\",\r\n        \"uksouth\": \"uks\",\r\n        \"ukwest\": \"ukw\",\r\n        \"westcentralus\": \"wcus\",\r\n        \"westeurope\": \"weu\",\r\n        \"westindia\": \"win\",\r\n        \"westus\": \"wus\",\r\n        \"westus2\": \"wus2\",\r\n        \"westus3\": \"wus3\"\r\n    }\r\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-pep', variables('naming').resourceTypeAbbreviations.networkSecurityGroup)]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]",
                      "mysqlServer": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.mysqlServer), '-', '')), 24)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayUserAssignedIdentity]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "16474600229997273387"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 128,
                      "metadata": {
                        "description": "Required. The name of the user assigned managed Identity. 3-128, can contain \"-\" and \"_\""
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the managedIDentity."
                      },
                      "value": "[parameters('name')]"
                    },
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the managedIDentity."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "The type of the managedIDentity."
                      },
                      "value": "Microsoft.ManagedIdentity/userAssignedIdentities"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ServicePrincipalId of the managedIDentity."
                      },
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    },
                    "tenantId": {
                      "type": "string",
                      "metadata": {
                        "description": "The TenantId of the managedIDentity."
                      },
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').tenantId]"
                    },
                    "clientId": {
                      "type": "string",
                      "metadata": {
                        "description": "The clientId of the managedIDentity."
                      },
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "A user-assigned managed identity that enables Application Gateway to access Key Vault for its TLS certs."
              }
            },
            {
              "condition": "[parameters('enableApplicationGatewayCertificate')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "subscriptionId": "[variables('keyVaultSubscriptionId')]",
              "resourceGroup": "[variables('keyVaultResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[variables('keyVaultName')]"
                  },
                  "appGatewayCertificateData": {
                    "value": "[variables('$fxv#0')]"
                  },
                  "appGatewayCertificateKeyName": {
                    "value": "[parameters('applicationGatewayCertificateKeyName')]"
                  },
                  "appGatewayUserAssignedIdentityPrincipalId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "5883158518687836349"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string"
                    },
                    "appGatewayUserAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "appGatewayCertificateKeyName": {
                      "type": "string"
                    },
                    "appGatewayCertificateData": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "keyVaultSecretUserRoleGuid": "4633458b-17de-408a-b874-0445c86b69e6"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]",
                      "properties": {
                        "value": "[parameters('appGatewayCertificateData')]",
                        "contentType": "application/x-pkcs12",
                        "attributes": {
                          "enabled": true
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]",
                      "name": "[guid(subscription().id, resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('appGatewayUserAssignedIdentityPrincipalId'), 'KeyVaultSecretUser')]",
                      "properties": {
                        "principalId": "[parameters('appGatewayUserAssignedIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretUserRoleGuid'))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "SecretUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName')), '2022-07-01').secretUri]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ],
              "metadata": {
                "description": "Adds the PFX file into Azure Key Vault for consumption by Application Gateway."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayPip]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "skuName": {
                    "value": "Standard"
                  },
                  "publicIPAllocationMethod": {
                    "value": "Static"
                  },
                  "zones": "[if(parameters('deployZoneRedundantResources'), createObject('value', createArray('1', '2', '3')), createObject('value', createArray()))]",
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('applicationGatewayLogAnalyticsId')]"
                  },
                  "ddosProtectionMode": {
                    "value": "[parameters('ddosProtectionMode')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11999849498950378244"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIPPrefixResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Dynamic",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "domainNameLabel": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                      }
                    },
                    "fqdn": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                      }
                    },
                    "reverseFqdn": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ],
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    },
                    "ddosProtectionMode": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled",
                        "VirtualNetworkInherited"
                      ],
                      "metadata": {
                        "description": "Optional. DDoS protection mode. see https://learn.microsoft.com/azure/ddos-protection/ddos-protection-sku-comparison#skus"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[parameters('zones')]",
                      "properties": {
                        "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": 4,
                        "ipTags": [],
                        "ddosSettings": {
                          "protectionMode": "[parameters('ddosProtectionMode')]"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      },
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "ipAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      },
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01').ipAddress, '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('applicationGateway-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentities": {
                    "value": {
                      "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.id.value)]": {}
                    }
                  },
                  "sku": {
                    "value": "WAF_v2"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('applicationGatewayLogAnalyticsId')]"
                  },
                  "gatewayIPConfigurations": {
                    "value": [
                      {
                        "name": "appGatewayIpConfig",
                        "properties": {
                          "subnet": {
                            "id": "[parameters('applicationGatewaySubnetId')]"
                          }
                        }
                      }
                    ]
                  },
                  "backendAddressPools": {
                    "value": [
                      {
                        "name": "acaServiceBackend",
                        "properties": {
                          "backendAddresses": [
                            {
                              "fqdn": "[parameters('applicationGatewayPrimaryBackendEndFqdn')]"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "sslCertificates": "[if(parameters('enableApplicationGatewayCertificate'), createObject('value', createArray(createObject('name', parameters('applicationGatewayFqdn'), 'properties', createObject('keyVaultSecretId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('keyVaultSubscriptionId'), variables('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.SecretUri.value)))), createObject('value', createArray()))]",
                  "frontendIPConfigurations": {
                    "value": [
                      {
                        "name": "appGwPublicFrontendIp",
                        "properties": {
                          "privateIPAllocationMethod": "Dynamic",
                          "publicIPAddress": {
                            "id": "[reference(resourceId('Microsoft.Resources/deployments', take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.resourceId.value]"
                          }
                        }
                      }
                    ]
                  },
                  "frontendPorts": "[if(parameters('enableApplicationGatewayCertificate'), createObject('value', createArray(createObject('name', 'port_443', 'properties', createObject('port', 443)), createObject('name', 'port_80', 'properties', createObject('port', 80)))), createObject('value', createArray(createObject('name', 'port_80', 'properties', createObject('port', 80)))))]",
                  "backendHttpSettingsCollection": {
                    "value": [
                      {
                        "name": "https",
                        "properties": {
                          "port": 443,
                          "protocol": "Https",
                          "cookieBasedAffinity": "Disabled",
                          "pickHostNameFromBackendAddress": true,
                          "requestTimeout": 20,
                          "probe": {
                            "id": "[resourceId('Microsoft.Network/applicationGateways/probes', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway, 'webProbe')]"
                          }
                        }
                      }
                    ]
                  },
                  "httpListeners": "[if(not(parameters('enableApplicationGatewayCertificate')), createObject('value', createArray(createObject('name', 'httpListener', 'properties', createObject('frontendIPConfiguration', createObject('id', format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'frontendPort', createObject('id', format('{0}/frontendPorts/port_80', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'protocol', 'Http', 'hostnames', createArray(), 'requireServerNameIndication', false())))), createObject('value', createArray(createObject('name', 'httpListener', 'properties', createObject('frontendIPConfiguration', createObject('id', format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'frontendPort', createObject('id', format('{0}/frontendPorts/port_443', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'protocol', 'Https', 'sslCertificate', createObject('id', format('{0}/sslCertificates/{1}', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway), parameters('applicationGatewayFqdn'))), 'hostnames', createArray(), 'requireServerNameIndication', false())))))]",
                  "requestRoutingRules": {
                    "value": [
                      {
                        "name": "routingRules",
                        "properties": {
                          "ruleType": "Basic",
                          "priority": 100,
                          "httpListener": {
                            "id": "[format('{0}/httpListeners/httpListener', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))]"
                          },
                          "backendAddressPool": {
                            "id": "[format('{0}/backendAddressPools/acaServiceBackend', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))]"
                          },
                          "backendHttpSettings": {
                            "id": "[format('{0}/backendHttpSettingsCollection/https', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))]"
                          }
                        }
                      }
                    ]
                  },
                  "probes": {
                    "value": [
                      {
                        "name": "webProbe",
                        "properties": {
                          "protocol": "Https",
                          "host": "[parameters('applicationGatewayPrimaryBackendEndFqdn')]",
                          "path": "[parameters('appGatewayBackendHealthProbePath')]",
                          "interval": 30,
                          "timeout": 30,
                          "unhealthyThreshold": 3,
                          "pickHostNameFromBackendHttpSettings": false,
                          "minServers": 0,
                          "match": {
                            "statusCodes": [
                              "200-499"
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "zones": "[if(parameters('deployZoneRedundantResources'), createObject('value', createArray('1', '2', '3')), createObject('value', createArray()))]",
                  "webApplicationFirewallConfiguration": {
                    "value": {
                      "enabled": true,
                      "firewallMode": "Prevention",
                      "ruleSetType": "OWASP",
                      "ruleSetVersion": "3.2",
                      "disabledRuleGroups": [],
                      "requestBodyCheck": true,
                      "maxRequestBodySizeInKb": 128,
                      "fileUploadLimitInMb": 100
                    }
                  },
                  "sslPolicyType": {
                    "value": "Predefined"
                  },
                  "sslPolicyName": {
                    "value": "AppGwSslPolicy20220101"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "3155928612374688041"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Required. Name of the Application Gateway."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "authenticationCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Authentication certificates of the application gateway resource."
                      }
                    },
                    "autoscaleMaxCapacity": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Upper bound on number of Application Gateway capacity."
                      }
                    },
                    "autoscaleMinCapacity": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Lower bound on number of Application Gateway capacity."
                      }
                    },
                    "backendAddressPools": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Backend address pool of the application gateway resource."
                      }
                    },
                    "backendHttpSettingsCollection": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Backend http settings of the application gateway resource."
                      }
                    },
                    "customErrorConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom error configurations of the application gateway resource."
                      }
                    },
                    "enableFips": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether FIPS is enabled on the application gateway resource."
                      }
                    },
                    "enableHttp2": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether HTTP2 is enabled on the application gateway resource."
                      }
                    },
                    "firewallPolicyId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of an associated firewall policy. Should be configured for security reasons."
                      }
                    },
                    "frontendIPConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Frontend IP addresses of the application gateway resource."
                      }
                    },
                    "frontendPorts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Frontend ports of the application gateway resource."
                      }
                    },
                    "gatewayIPConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Subnets of the application gateway resource."
                      }
                    },
                    "enableRequestBuffering": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable request buffering."
                      }
                    },
                    "enableResponseBuffering": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable response buffering."
                      }
                    },
                    "httpListeners": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Http listeners of the application gateway resource."
                      }
                    },
                    "loadDistributionPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Load distribution policies of the application gateway resource."
                      }
                    },
                    "privateLinkConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. PrivateLink configurations on application gateway."
                      }
                    },
                    "probes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Probes of the application gateway resource."
                      }
                    },
                    "redirectConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Redirect configurations of the application gateway resource."
                      }
                    },
                    "requestRoutingRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Request routing rules of the application gateway resource."
                      }
                    },
                    "rewriteRuleSets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rewrite rules for the application gateway resource."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "WAF_Medium",
                      "allowedValues": [
                        "Standard_Small",
                        "Standard_Medium",
                        "Standard_Large",
                        "WAF_Medium",
                        "WAF_Large",
                        "Standard_v2",
                        "WAF_v2"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the SKU for the Application Gateway."
                      }
                    },
                    "capacity": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "maxValue": 10,
                      "metadata": {
                        "description": "Optional. The number of Application instances to be configured."
                      }
                    },
                    "sslCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. SSL certificates of the application gateway resource."
                      }
                    },
                    "sslPolicyCipherSuites": {
                      "type": "array",
                      "defaultValue": [
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
                      ],
                      "allowedValues": [
                        "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
                        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
                        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
                        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
                        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
                        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
                        "TLS_RSA_WITH_AES_256_GCM_SHA384"
                      ],
                      "metadata": {
                        "description": "Optional. Ssl cipher suites to be enabled in the specified order to application gateway."
                      }
                    },
                    "sslPolicyMinProtocolVersion": {
                      "type": "string",
                      "defaultValue": "TLSv1_2",
                      "allowedValues": [
                        "TLSv1_0",
                        "TLSv1_1",
                        "TLSv1_2",
                        "TLSv1_3"
                      ],
                      "metadata": {
                        "description": "Optional. Ssl protocol enums."
                      }
                    },
                    "sslPolicyName": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "AppGwSslPolicy20150501",
                        "AppGwSslPolicy20170401",
                        "AppGwSslPolicy20170401S",
                        "AppGwSslPolicy20220101",
                        "AppGwSslPolicy20220101S",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Ssl predefined policy name enums."
                      }
                    },
                    "sslPolicyType": {
                      "type": "string",
                      "defaultValue": "Custom",
                      "allowedValues": [
                        "Custom",
                        "CustomV2",
                        "Predefined"
                      ],
                      "metadata": {
                        "description": "Optional. Type of Ssl Policy."
                      }
                    },
                    "sslProfiles": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. SSL profiles of the application gateway resource."
                      }
                    },
                    "trustedClientCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Trusted client certificates of the application gateway resource."
                      }
                    },
                    "trustedRootCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Trusted Root certificates of the application gateway resource."
                      }
                    },
                    "urlPathMaps": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. URL path map of the application gateway resource."
                      }
                    },
                    "webApplicationFirewallConfiguration": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Application gateway web application firewall configuration. Should be configured for security reasons."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting where the resource needs to come from."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "ApplicationGatewayAccessLog",
                        "ApplicationGatewayPerformanceLog",
                        "ApplicationGatewayFirewallLog"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "backendSettingsCollection": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Backend settings of the application gateway resource. For default limits, see [Application Gateway limits](https://learn.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits)."
                      }
                    },
                    "listeners": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://learn.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits)."
                      }
                    },
                    "routingRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Routing rules of the application gateway resource."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "identityType": "[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": "[union(createObject('authenticationCertificates', parameters('authenticationCertificates'), 'autoscaleConfiguration', if(and(greater(parameters('autoscaleMaxCapacity'), 0), greaterOrEquals(parameters('autoscaleMinCapacity'), 0)), createObject('maxCapacity', parameters('autoscaleMaxCapacity'), 'minCapacity', parameters('autoscaleMinCapacity')), null()), 'backendAddressPools', parameters('backendAddressPools'), 'backendHttpSettingsCollection', parameters('backendHttpSettingsCollection'), 'backendSettingsCollection', parameters('backendSettingsCollection'), 'customErrorConfigurations', parameters('customErrorConfigurations'), 'enableHttp2', parameters('enableHttp2'), 'firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null()), 'forceFirewallPolicyAssociation', not(empty(parameters('firewallPolicyId'))), 'frontendIPConfigurations', parameters('frontendIPConfigurations'), 'frontendPorts', parameters('frontendPorts'), 'gatewayIPConfigurations', parameters('gatewayIPConfigurations'), 'globalConfiguration', createObject('enableRequestBuffering', parameters('enableRequestBuffering'), 'enableResponseBuffering', parameters('enableResponseBuffering')), 'httpListeners', parameters('httpListeners'), 'loadDistributionPolicies', parameters('loadDistributionPolicies'), 'listeners', parameters('listeners'), 'privateLinkConfigurations', parameters('privateLinkConfigurations'), 'probes', parameters('probes'), 'redirectConfigurations', parameters('redirectConfigurations'), 'requestRoutingRules', parameters('requestRoutingRules'), 'routingRules', parameters('routingRules'), 'rewriteRuleSets', parameters('rewriteRuleSets'), 'sku', createObject('name', parameters('sku'), 'tier', if(endsWith(parameters('sku'), 'v2'), parameters('sku'), substring(parameters('sku'), 0, indexOf(parameters('sku'), '_'))), 'capacity', if(and(greater(parameters('autoscaleMaxCapacity'), 0), greaterOrEquals(parameters('autoscaleMinCapacity'), 0)), null(), parameters('capacity'))), 'sslCertificates', parameters('sslCertificates'), 'sslPolicy', if(not(equals(parameters('sslPolicyType'), 'Predefined')), createObject('cipherSuites', parameters('sslPolicyCipherSuites'), 'minProtocolVersion', parameters('sslPolicyMinProtocolVersion'), 'policyName', if(empty(parameters('sslPolicyName')), null(), parameters('sslPolicyName')), 'policyType', parameters('sslPolicyType')), createObject('policyName', if(empty(parameters('sslPolicyName')), null(), parameters('sslPolicyName')), 'policyType', parameters('sslPolicyType'))), 'sslProfiles', parameters('sslProfiles'), 'trustedClientCertificates', parameters('trustedClientCertificates'), 'trustedRootCertificates', parameters('trustedRootCertificates'), 'urlPathMaps', parameters('urlPathMaps')), if(parameters('enableFips'), createObject('enableFips', parameters('enableFips')), createObject()), if(not(empty(parameters('webApplicationFirewallConfiguration'))), createObject('webApplicationFirewallConfiguration', parameters('webApplicationFirewallConfiguration')), createObject()))]",
                      "zones": "[parameters('zones')]"
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
                        "metrics": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('diagnosticWorkspaceId'))), empty(parameters('diagnosticEventHubAuthorizationRuleId'))), empty(parameters('diagnosticEventHubName'))), null(), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('diagnosticWorkspaceId'))), empty(parameters('diagnosticEventHubAuthorizationRuleId'))), empty(parameters('diagnosticEventHubName'))), null(), variables('diagnosticsLogs'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/applicationGateways', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application gateway."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application gateway."
                      },
                      "value": "[resourceId('Microsoft.Network/applicationGateways', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the application gateway was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('name')), '2022-07-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('keyVaultSubscriptionId'), variables('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('06-sharedNamingDeployment-{0}', deployment().name), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ]
            }
          ],
          "outputs": {
            "applicationGatewayFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the Azure Application Gateway."
              },
              "value": "[parameters('applicationGatewayFqdn')]"
            },
            "applicationGatewayPublicIp": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the Azure Application Gateway."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.ipAddress.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('helloWorlSampleApp-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgSpokeName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    }
  ],
  "outputs": {
    "hubVNetId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of hub virtual network."
      },
      "value": "[if(parameters('deployHub'), reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVNetId.value, '')]"
    },
    "hubVNetName": {
      "type": "string",
      "metadata": {
        "description": "The name of hub virtual network."
      },
      "value": "[if(parameters('deployHub'), reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.hubVnetName.value, '')]"
    },
    "hubResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Hub resource group."
      },
      "value": "[if(parameters('deployHub'), reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.resourceGroupName.value, '')]"
    },
    "spokeResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke resource group."
      },
      "value": "[variables('rgSpokeName')]"
    },
    "spokeVNetId": {
      "type": "string",
      "metadata": {
        "description": "The  resource ID of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetId.value]"
    },
    "spokeVnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetName.value]"
    },
    "spokeInfraSubnetId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Spoke Infrastructure Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetId.value]"
    },
    "spokeInfraSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Infrastructure Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetName.value]"
    },
    "spokePrivateEndpointsSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Private Endpoints Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokePrivateEndpointsSubnetName.value]"
    },
    "spokeApplicationGatewaySubnetId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Spoke Application Gateway Subnet. If \"spokeApplicationGatewaySubnetAddressPrefix\" is empty, the subnet will not be created and the value returned is empty."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetId.value]"
    },
    "spokeApplicationGatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Application Gateway Subnet.  If \"spokeApplicationGatewaySubnetAddressPrefix\" is empty, the subnet will not be created and the value returned is empty."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetName.value]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Log Analytics workspace created in the spoke vnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
    },
    "vmJumpBoxName": {
      "type": "string",
      "metadata": {
        "description": "The name of the jump box virtual machine"
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.vmJumpBoxName.value]"
    },
    "containerRegistryId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the container registry."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryId.value]"
    },
    "containerRegistryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container registry."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryName.value]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "metadata": {
        "description": "The name of the container registry login server."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryLoginServer.value]"
    },
    "containerRegistryUserAssignedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the user assigned managed identity for the container registry to be able to pull images from it."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
    },
    "keyVaultId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultId.value]"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultName.value]"
    },
    "openAIAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Open AI account name."
      },
      "value": "[if(parameters('deployOpenAi'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.openAIAccountName.value, '')]"
    },
    "containerAppsEnvironmentId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the container apps environment."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentId.value]"
    },
    "containerAppsEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container apps environment."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentName.value]"
    },
    "applicationInsightsName": {
      "type": "string",
      "metadata": {
        "description": " The name of application Insights instance."
      },
      "value": "[if(parameters('enableApplicationInsights'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.applicationInsightsName.value, '')]"
    }
  }
}